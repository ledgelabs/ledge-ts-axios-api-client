/**
 * @ledge/api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @enum {string}
 */
export declare const AccessStatus: {
    readonly Active: "ACTIVE";
    readonly Disabled: "DISABLED";
};
export type AccessStatus = typeof AccessStatus[keyof typeof AccessStatus];
/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
    [key: string]: any;
    /**
     *
     * @type {number}
     * @memberof Activity
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'userId': string;
    /**
     *
     * @type {ActivityType}
     * @memberof Activity
     */
    'type': ActivityType;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'objectId': string;
    /**
     *
     * @type {number}
     * @memberof Activity
     */
    'count': number;
    /**
     *
     * @type {User}
     * @memberof Activity
     */
    'user'?: User | null;
    /**
     *
     * @type {boolean}
     * @memberof Activity
     */
    'processed': boolean;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'occurrence': string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ActivityType: {
    readonly UserSignUp: "USER_SIGN_UP";
    readonly Referral: "REFERRAL";
    readonly ExternalMilestone: "EXTERNAL_MILESTONE";
    readonly ExternalCumulative: "EXTERNAL_CUMULATIVE";
    readonly EmailSocialAuth: "EMAIL_SOCIAL_AUTH";
    readonly XSocialAuth: "X_SOCIAL_AUTH";
    readonly DiscordSocialAuth: "DISCORD_SOCIAL_AUTH";
    readonly XSocialOpenlink: "X_SOCIAL_OPENLINK";
    readonly XSocialLike: "X_SOCIAL_LIKE";
    readonly XSocialFollow: "X_SOCIAL_FOLLOW";
    readonly XSocialShare: "X_SOCIAL_SHARE";
    readonly XSocialHashtag: "X_SOCIAL_HASHTAG";
    readonly XSocialRetweet: "X_SOCIAL_RETWEET";
    readonly DiscordSocialJoinServer: "DISCORD_SOCIAL_JOIN_SERVER";
    readonly OpenLink: "OPEN_LINK";
};
export type ActivityType = typeof ActivityType[keyof typeof ActivityType];
/**
 *
 * @export
 * @interface Announcement
 */
export interface Announcement {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Announcement
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Announcement
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Announcement
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Announcement
     */
    'message': string;
    /**
     *
     * @type {boolean}
     * @memberof Announcement
     */
    'status': boolean;
}
/**
 *
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'expireAt': string | null;
    /**
     *
     * @type {string}
     * @memberof ApiKey
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof ApiKey
     */
    'game'?: Game;
    /**
     *
     * @type {AccessStatus}
     * @memberof ApiKey
     */
    'status': AccessStatus;
}
/**
 *
 * @export
 * @interface Banner
 */
export interface Banner {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'alt': string | null;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'logoText': string | null;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'logoUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'desktopImageUrl': string;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'mobileImageUrl': string;
    /**
     *
     * @type {BannerLocation}
     * @memberof Banner
     */
    'bannerLocation': BannerLocation;
    /**
     *
     * @type {string}
     * @memberof Banner
     */
    'eventId': string;
    /**
     *
     * @type {Event}
     * @memberof Banner
     */
    'event'?: Event;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const BannerLocation: {
    readonly HomePage: "HOME_PAGE";
    readonly EventPage: "EVENT_PAGE";
};
export type BannerLocation = typeof BannerLocation[keyof typeof BannerLocation];
/**
 *
 * @export
 * @interface BaseRaffleRewardsArgs
 */
export interface BaseRaffleRewardsArgs {
    [key: string]: any;
    /**
     *
     * @type {number}
     * @memberof BaseRaffleRewardsArgs
     */
    'numberOfWinners': number;
    /**
     *
     * @type {PrizeType}
     * @memberof BaseRaffleRewardsArgs
     */
    'prizeType': PrizeType;
    /**
     *
     * @type {string}
     * @memberof BaseRaffleRewardsArgs
     */
    'productId'?: string;
}
/**
 * Batch Payload for updateMany & deleteMany & createMany
 * @export
 * @interface BatchPayload
 */
export interface BatchPayload {
    /**
     *
     * @type {number}
     * @memberof BatchPayload
     */
    'count': number;
}
/**
 *
 * @export
 * @interface Blacklist
 */
export interface Blacklist {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Blacklist
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Blacklist
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Blacklist
     */
    'updatedAt': string;
    /**
     *
     * @type {BlacklistSeverity}
     * @memberof Blacklist
     */
    'severity': BlacklistSeverity;
    /**
     *
     * @type {string}
     * @memberof Blacklist
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof Blacklist
     */
    'user'?: User;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const BlacklistAction: {
    readonly Ban: "BAN";
    readonly Unban: "UNBAN";
};
export type BlacklistAction = typeof BlacklistAction[keyof typeof BlacklistAction];
/**
 *
 * @export
 * @interface BlacklistHistory
 */
export interface BlacklistHistory {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'apiKeyId': string;
    /**
     *
     * @type {BlacklistAction}
     * @memberof BlacklistHistory
     */
    'action': BlacklistAction;
    /**
     *
     * @type {BlacklistSeverity}
     * @memberof BlacklistHistory
     */
    'severity': BlacklistSeverity | null;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'notes': string | null;
    /**
     *
     * @type {string}
     * @memberof BlacklistHistory
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof BlacklistHistory
     */
    'user'?: User;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const BlacklistSeverity: {
    readonly Game: "GAME";
};
export type BlacklistSeverity = typeof BlacklistSeverity[keyof typeof BlacklistSeverity];
/**
 *
 * @export
 * @interface ClaimPrizeRequest
 */
export interface ClaimPrizeRequest {
    /**
     *
     * @type {string}
     * @memberof ClaimPrizeRequest
     */
    'notificationId': string;
}
/**
 *
 * @export
 * @interface ClaimPrizeResponse
 */
export interface ClaimPrizeResponse {
    /**
     *
     * @type {TransactionNew}
     * @memberof ClaimPrizeResponse
     */
    'transaction': TransactionNew | null;
    /**
     *
     * @type {Notification}
     * @memberof ClaimPrizeResponse
     */
    'notification': Notification | null;
}
/**
 *
 * @export
 * @interface CompleteSocialQuestRequest
 */
export interface CompleteSocialQuestRequest {
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestRequest
     */
    'eventId': string;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestRequest
     */
    'questScheduleId': string;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestRequest
     */
    'goalId': string;
}
/**
 *
 * @export
 * @interface CompleteSocialQuestRequestNew
 */
export interface CompleteSocialQuestRequestNew {
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestRequestNew
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestRequestNew
     */
    'questId': string;
}
/**
 *
 * @export
 * @interface CompleteSocialQuestResponse
 */
export interface CompleteSocialQuestResponse {
    /**
     *
     * @type {boolean}
     * @memberof CompleteSocialQuestResponse
     */
    'isComplete': boolean | null;
    /**
     *
     * @type {number}
     * @memberof CompleteSocialQuestResponse
     */
    'progress': number | null;
    /**
     *
     * @type {boolean}
     * @memberof CompleteSocialQuestResponse
     */
    'isPendingVerification': boolean;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestResponse
     */
    'questScheduleId': string;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestResponse
     */
    'goalId': string;
    /**
     *
     * @type {string}
     * @memberof CompleteSocialQuestResponse
     */
    'progressId': string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ConnectionType: {
    readonly Discord: "discord";
    readonly X: "x";
    readonly Email: "email";
    readonly Google: "google";
};
export type ConnectionType = typeof ConnectionType[keyof typeof ConnectionType];
/**
 *
 * @export
 * @interface CreateAppToken200Response
 */
export interface CreateAppToken200Response {
    /**
     *
     * @type {string}
     * @memberof CreateAppToken200Response
     */
    'message': string;
    /**
     *
     * @type {boolean}
     * @memberof CreateAppToken200Response
     */
    'success': boolean;
}
/**
 *
 * @export
 * @interface CreateBannerArgs
 */
export interface CreateBannerArgs {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof CreateBannerArgs
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {BannerLocation}
     * @memberof CreateBannerArgs
     */
    'bannerLocation': BannerLocation;
    /**
     *
     * @type {string}
     * @memberof CreateBannerArgs
     */
    'eventId': string;
    /**
     *
     * @type {string}
     * @memberof CreateBannerArgs
     */
    'desktopImageUrl': string;
    /**
     *
     * @type {string}
     * @memberof CreateBannerArgs
     */
    'mobileImageUrl': string;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof CreateBannerArgs
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof CreateBannerArgs
     */
    'logoUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateBannerArgs
     */
    'alt'?: string | null;
}
/**
 *
 * @export
 * @interface CreateEventArgs
 */
export interface CreateEventArgs {
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'subtitle': string;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'gameId': string;
    /**
     *
     * @type {EventStatus}
     * @memberof CreateEventArgs
     */
    'status'?: EventStatus;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof CreateEventArgs
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof CreateEventArgs
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'imageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'mapCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'youtubeId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateEventArgs
     */
    'videoUrl'?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const CreateEventGameAccess: {
    readonly Hidden: "HIDDEN";
    readonly Creator: "CREATOR";
};
export type CreateEventGameAccess = typeof CreateEventGameAccess[keyof typeof CreateEventGameAccess];
/**
 *
 * @export
 * @interface CreateGameArgs
 */
export interface CreateGameArgs {
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof CreateGameArgs
     */
    'createAccess'?: CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'createEventImageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateGameArgs
     */
    'clientId'?: string | null;
}
/**
 *
 * @export
 * @interface CreateGameQuestArgs
 */
export interface CreateGameQuestArgs {
    [key: string]: any;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateGameQuestArgs
     */
    'gameQuestTemplateIds': Array<string>;
    /**
     *
     * @type {string}
     * @memberof CreateGameQuestArgs
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateGameQuestArgs
     */
    'endTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateGameQuestArgs
     */
    'existingScheduleId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateGameQuestArgs
     */
    'existingQuestSetId'?: string;
}
/**
 *
 * @export
 * @interface CreateGoalArgs
 */
export interface CreateGoalArgs {
    /**
     *
     * @type {string}
     * @memberof CreateGoalArgs
     */
    'bannerUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateGoalArgs
     */
    'openUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateGoalArgs
     */
    'objectId': string | null;
    /**
     *
     * @type {ActivityType}
     * @memberof CreateGoalArgs
     */
    'activity': ActivityType;
    /**
     *
     * @type {number}
     * @memberof CreateGoalArgs
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof CreateGoalArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateGoalArgs
     */
    'title': string;
}
/**
 *
 * @export
 * @interface CreateLeaderboardArgs
 */
export interface CreateLeaderboardArgs {
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof CreateLeaderboardArgs
     */
    'leaderboardDisplay': LeaderboardDisplay;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardArgs
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardArgs
     */
    'eventId': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardArgs
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardArgs
     */
    'title': string;
}
/**
 *
 * @export
 * @interface CreateLeaderboardResponse
 */
export interface CreateLeaderboardResponse {
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof CreateLeaderboardResponse
     */
    'leaderboardDisplay': LeaderboardDisplay | null;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'eventId': string | null;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface CreateLeaderboardRewardArgs
 */
export interface CreateLeaderboardRewardArgs {
    [key: string]: any;
    /**
     *
     * @type {CreateLeaderboardRewardArgsCashPrize}
     * @memberof CreateLeaderboardRewardArgs
     */
    'cashPrize'?: CreateLeaderboardRewardArgsCashPrize;
}
/**
 *
 * @export
 * @interface CreateLeaderboardRewardArgsCashPrize
 */
export interface CreateLeaderboardRewardArgsCashPrize {
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardRewardArgsCashPrize
     */
    'productId'?: string;
    /**
     *
     * @type {number}
     * @memberof CreateLeaderboardRewardArgsCashPrize
     */
    'topNPlayers': CreateLeaderboardRewardArgsCashPrizeTopNPlayersEnum;
    /**
     *
     * @type {number}
     * @memberof CreateLeaderboardRewardArgsCashPrize
     */
    'prizePoolQuantity': number;
}
export declare const CreateLeaderboardRewardArgsCashPrizeTopNPlayersEnum: {
    readonly NUMBER_3: 3;
    readonly NUMBER_5: 5;
    readonly NUMBER_10: 10;
};
export type CreateLeaderboardRewardArgsCashPrizeTopNPlayersEnum = typeof CreateLeaderboardRewardArgsCashPrizeTopNPlayersEnum[keyof typeof CreateLeaderboardRewardArgsCashPrizeTopNPlayersEnum];
/**
 *
 * @export
 * @interface CreateLeaderboardRewardsArgs
 */
export interface CreateLeaderboardRewardsArgs {
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardRewardsArgs
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {string}
     * @memberof CreateLeaderboardRewardsArgs
     */
    'productId': string;
    /**
     *
     * @type {number}
     * @memberof CreateLeaderboardRewardsArgs
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof CreateLeaderboardRewardsArgs
     */
    'endingPlace'?: number;
    /**
     *
     * @type {number}
     * @memberof CreateLeaderboardRewardsArgs
     */
    'startingPlace': number;
}
/**
 *
 * @export
 * @interface CreatePrizeDeliveredNotification200Response
 */
export interface CreatePrizeDeliveredNotification200Response {
}
/**
 *
 * @export
 * @interface CreatePrizeDeliveredNotificationRequest
 */
export interface CreatePrizeDeliveredNotificationRequest {
    /**
     *
     * @type {string}
     * @memberof CreatePrizeDeliveredNotificationRequest
     */
    'prizeText': string;
    /**
     *
     * @type {string}
     * @memberof CreatePrizeDeliveredNotificationRequest
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface CreateProductArgs
 */
export interface CreateProductArgs {
    /**
     *
     * @type {string}
     * @memberof CreateProductArgs
     */
    'title': string;
    /**
     *
     * @type {ProductType}
     * @memberof CreateProductArgs
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof CreateProductArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateProductArgs
     */
    'gameId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateProductArgs
     */
    'iconUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateProductArgs
     */
    'subTitle'?: string | null;
    /**
     *
     * @type {number}
     * @memberof CreateProductArgs
     */
    'initialQuantity'?: number;
}
/**
 *
 * @export
 * @interface CreateQuestArgs
 */
export interface CreateQuestArgs {
    /**
     *
     * @type {QuestType}
     * @memberof CreateQuestArgs
     */
    'type': QuestType;
}
/**
 *
 * @export
 * @interface CreateQuestGoalArgs
 */
export interface CreateQuestGoalArgs {
    /**
     *
     * @type {QuestType}
     * @memberof CreateQuestGoalArgs
     */
    'type': QuestType;
    /**
     *
     * @type {string}
     * @memberof CreateQuestGoalArgs
     */
    'bannerUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateQuestGoalArgs
     */
    'openUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateQuestGoalArgs
     */
    'objectId': string | null;
    /**
     *
     * @type {ActivityType}
     * @memberof CreateQuestGoalArgs
     */
    'activity': ActivityType;
    /**
     *
     * @type {number}
     * @memberof CreateQuestGoalArgs
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof CreateQuestGoalArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateQuestGoalArgs
     */
    'title': string;
}
/**
 *
 * @export
 * @interface CreateQuestResponse
 */
export interface CreateQuestResponse {
    /**
     *
     * @type {Goal}
     * @memberof CreateQuestResponse
     */
    'goal': Goal;
    /**
     *
     * @type {Quest}
     * @memberof CreateQuestResponse
     */
    'quest': Quest;
}
/**
 *
 * @export
 * @interface CreateQuestRewardArgs
 */
export interface CreateQuestRewardArgs {
    /**
     *
     * @type {string}
     * @memberof CreateQuestRewardArgs
     */
    'goalId': string;
    /**
     *
     * @type {string}
     * @memberof CreateQuestRewardArgs
     */
    'productId': string;
    /**
     *
     * @type {number}
     * @memberof CreateQuestRewardArgs
     */
    'quantity': number;
}
/**
 *
 * @export
 * @interface CreateQuestScheduleArgs
 */
export interface CreateQuestScheduleArgs {
    /**
     *
     * @type {string}
     * @memberof CreateQuestScheduleArgs
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof CreateQuestScheduleArgs
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateQuestScheduleArgs
     */
    'questId': string;
}
/**
 *
 * @export
 * @interface CreateRaffleArgsBaseRaffleRewardsArgs
 */
export interface CreateRaffleArgsBaseRaffleRewardsArgs {
    [key: string]: any;
    /**
     *
     * @type {PrizeType}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'rewardDistributionMethod': PrizeType;
    /**
     *
     * @type {BaseRaffleRewardsArgs}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'rewardDistribution': BaseRaffleRewardsArgs;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'endTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'eventId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'raffleTicketId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'existingScheduleId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateRaffleArgsBaseRaffleRewardsArgs
     */
    'expiredTicketID'?: string;
}
/**
 *
 * @export
 * @interface CreateSocialQuestArgs
 */
export interface CreateSocialQuestArgs {
    [key: string]: any;
    /**
     *
     * @type {Array<CreateSocialQuestArgsSocialQuestInner>}
     * @memberof CreateSocialQuestArgs
     */
    'socialQuest': Array<CreateSocialQuestArgsSocialQuestInner>;
    /**
     *
     * @type {string}
     * @memberof CreateSocialQuestArgs
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateSocialQuestArgs
     */
    'endTime': string;
    /**
     *
     * @type {string}
     * @memberof CreateSocialQuestArgs
     */
    'existingScheduleId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateSocialQuestArgs
     */
    'existingQuestSetId'?: string;
}
/**
 *
 * @export
 * @interface CreateSocialQuestArgsSocialQuestInner
 */
export interface CreateSocialQuestArgsSocialQuestInner {
    /**
     *
     * @type {number}
     * @memberof CreateSocialQuestArgsSocialQuestInner
     */
    'rewardQuantity': number;
    /**
     *
     * @type {string}
     * @memberof CreateSocialQuestArgsSocialQuestInner
     */
    'socialQuestTemplateId': string;
}
/**
 *
 * @export
 * @interface CreateUserConnectionRequest
 */
export interface CreateUserConnectionRequest {
    /**
     *
     * @type {ConnectionType}
     * @memberof CreateUserConnectionRequest
     */
    'socialConnectionType': ConnectionType;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionRequest
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionRequest
     */
    'sub'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionRequest
     */
    'nickname'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionRequest
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface CreateUserConnectionResponse
 */
export interface CreateUserConnectionResponse {
    /**
     *
     * @type {ConnectionType}
     * @memberof CreateUserConnectionResponse
     */
    'socialConnectionType': ConnectionType;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionResponse
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionResponse
     */
    'sub': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionResponse
     */
    'nickname': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionResponse
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserConnectionResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface DeleteAnnouncement200Response
 */
export interface DeleteAnnouncement200Response {
    /**
     *
     * @type {string}
     * @memberof DeleteAnnouncement200Response
     */
    'message': string;
}
/**
 *
 * @export
 * @interface Draw
 */
export interface Draw {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'objectId': string;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'ticketId': string;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'expiredTicketId': string | null;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'title': string | null;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'eventId': string | null;
    /**
     *
     * @type {QuestOrientation}
     * @memberof Draw
     */
    'questOrientation': QuestOrientation;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'imageBigUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Draw
     */
    'markdown': string | null;
    /**
     *
     * @type {boolean}
     * @memberof Draw
     */
    'excludePreviousWinners': boolean;
    /**
     *
     * @type {Product}
     * @memberof Draw
     */
    'ticket'?: Product | null;
    /**
     *
     * @type {Product}
     * @memberof Draw
     */
    'expiredTicket'?: Product | null;
    /**
     *
     * @type {Array<DrawProduct>}
     * @memberof Draw
     */
    'drawProducts'?: Array<DrawProduct>;
    /**
     *
     * @type {Array<DrawSchedule>}
     * @memberof Draw
     */
    'drawSchedules'?: Array<DrawSchedule>;
    /**
     *
     * @type {Event}
     * @memberof Draw
     */
    'event'?: Event | null;
}
/**
 *
 * @export
 * @interface DrawDetailed
 */
export interface DrawDetailed {
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'objectId': string;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'ticketId': string;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'expiredTicketId': string | null;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'title': string | null;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'eventId': string | null;
    /**
     *
     * @type {QuestOrientation}
     * @memberof DrawDetailed
     */
    'questOrientation': QuestOrientation;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'imageBigUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof DrawDetailed
     */
    'markdown': string | null;
    /**
     *
     * @type {boolean}
     * @memberof DrawDetailed
     */
    'excludePreviousWinners': boolean;
    /**
     *
     * @type {Product}
     * @memberof DrawDetailed
     */
    'ticket'?: Product | null;
    /**
     *
     * @type {Product}
     * @memberof DrawDetailed
     */
    'expiredTicket': Product | null;
    /**
     *
     * @type {Array<DrawProductDetailed>}
     * @memberof DrawDetailed
     */
    'drawProducts': Array<DrawProductDetailed>;
    /**
     *
     * @type {Array<DrawSchedule>}
     * @memberof DrawDetailed
     */
    'drawSchedules'?: Array<DrawSchedule>;
    /**
     *
     * @type {Event}
     * @memberof DrawDetailed
     */
    'event': Event | null;
}
/**
 *
 * @export
 * @interface DrawProduct
 */
export interface DrawProduct {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof DrawProduct
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof DrawProduct
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawProduct
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof DrawProduct
     */
    'qty': number;
    /**
     *
     * @type {string}
     * @memberof DrawProduct
     */
    'drawId': string;
    /**
     *
     * @type {string}
     * @memberof DrawProduct
     */
    'productId': string;
    /**
     *
     * @type {Draw}
     * @memberof DrawProduct
     */
    'draw'?: Draw | null;
    /**
     *
     * @type {Product}
     * @memberof DrawProduct
     */
    'product'?: Product | null;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof DrawProduct
     */
    'userDraws'?: Array<UserDraw>;
}
/**
 *
 * @export
 * @interface DrawProductDetailed
 */
export interface DrawProductDetailed {
    /**
     *
     * @type {string}
     * @memberof DrawProductDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof DrawProductDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawProductDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof DrawProductDetailed
     */
    'qty': number;
    /**
     *
     * @type {string}
     * @memberof DrawProductDetailed
     */
    'drawId': string;
    /**
     *
     * @type {string}
     * @memberof DrawProductDetailed
     */
    'productId': string;
    /**
     *
     * @type {Draw}
     * @memberof DrawProductDetailed
     */
    'draw'?: Draw | null;
    /**
     *
     * @type {Product}
     * @memberof DrawProductDetailed
     */
    'product': Product | null;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof DrawProductDetailed
     */
    'userDraws'?: Array<UserDraw>;
}
/**
 *
 * @export
 * @interface DrawSchedule
 */
export interface DrawSchedule {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'endTime': string;
    /**
     *
     * @type {boolean}
     * @memberof DrawSchedule
     */
    'recurring': boolean;
    /**
     *
     * @type {string}
     * @memberof DrawSchedule
     */
    'drawId': string;
    /**
     *
     * @type {boolean}
     * @memberof DrawSchedule
     */
    'processed': boolean;
    /**
     *
     * @type {Draw}
     * @memberof DrawSchedule
     */
    'draw'?: Draw | null;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof DrawSchedule
     */
    'userDraws'?: Array<UserDraw>;
}
/**
 *
 * @export
 * @interface DrawScheduleDetailed
 */
export interface DrawScheduleDetailed {
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'endTime': string;
    /**
     *
     * @type {boolean}
     * @memberof DrawScheduleDetailed
     */
    'recurring': boolean;
    /**
     *
     * @type {string}
     * @memberof DrawScheduleDetailed
     */
    'drawId': string;
    /**
     *
     * @type {boolean}
     * @memberof DrawScheduleDetailed
     */
    'processed': boolean;
    /**
     *
     * @type {DrawDetailed}
     * @memberof DrawScheduleDetailed
     */
    'draw': DrawDetailed | null;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof DrawScheduleDetailed
     */
    'userDraws'?: Array<UserDraw>;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     *
     * @type {number}
     * @memberof ErrorResponse
     */
    'code': number;
}
/**
 *
 * @export
 * @interface Event
 */
export interface Event {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'endTime': string | null;
    /**
     *
     * @type {EventStatus}
     * @memberof Event
     */
    'status': EventStatus;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'subtitle': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'mapCode': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'youtubeId': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'videoUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof Event
     */
    'game'?: Game;
    /**
     *
     * @type {Array<Draw>}
     * @memberof Event
     */
    'draws'?: Array<Draw>;
    /**
     *
     * @type {Array<Leaderboard>}
     * @memberof Event
     */
    'leaderboards'?: Array<Leaderboard>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof Event
     */
    'gameCodes'?: Array<GameCode>;
    /**
     *
     * @type {Array<Participant>}
     * @memberof Event
     */
    'participants'?: Array<Participant>;
    /**
     *
     * @type {Array<Quest>}
     * @memberof Event
     */
    'quest'?: Array<Quest>;
    /**
     *
     * @type {Array<Banner>}
     * @memberof Event
     */
    'banners'?: Array<Banner>;
}
/**
 *
 * @export
 * @interface EventChangeHistoryNew
 */
export interface EventChangeHistoryNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'timeChange': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'object': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'logMessage': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'authorUserId': string;
    /**
     *
     * @type {string}
     * @memberof EventChangeHistoryNew
     */
    'eventId': string;
    /**
     *
     * @type {EventNew}
     * @memberof EventChangeHistoryNew
     */
    'event'?: EventNew;
}
/**
 *
 * @export
 * @interface EventGame
 */
export interface EventGame {
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'clientId': string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof EventGame
     */
    'createAccess': CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof EventGame
     */
    'createEventImageUrl': string | null;
    /**
     *
     * @type {Array<ApiKey>}
     * @memberof EventGame
     */
    'apiKeys'?: Array<ApiKey>;
    /**
     *
     * @type {Array<Leaderboard>}
     * @memberof EventGame
     */
    'leaderboards'?: Array<Leaderboard>;
    /**
     *
     * @type {Array<UserInstalledGames>}
     * @memberof EventGame
     */
    'userInstalledGames'?: Array<UserInstalledGames>;
    /**
     *
     * @type {Array<Quest>}
     * @memberof EventGame
     */
    'quests'?: Array<Quest>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof EventGame
     */
    'gameCode'?: Array<GameCode>;
    /**
     *
     * @type {Array<Event>}
     * @memberof EventGame
     */
    'events'?: Array<Event>;
    /**
     *
     * @type {Array<GameLinks>}
     * @memberof EventGame
     */
    'links'?: Array<GameLinks>;
    /**
     *
     * @type {Array<EventNew>}
     * @memberof EventGame
     */
    'eventNew'?: Array<EventNew>;
    /**
     *
     * @type {Array<GameMode>}
     * @memberof EventGame
     */
    'gameModes': Array<GameMode>;
    /**
     *
     * @type {Array<GameQuestTemplate>}
     * @memberof EventGame
     */
    'gameQuestTemplates'?: Array<GameQuestTemplate>;
}
/**
 *
 * @export
 * @interface EventNew
 */
export interface EventNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'title': string | null;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'thumbnailUrl': string | null;
    /**
     *
     * @type {number}
     * @memberof EventNew
     */
    'maxPlayers': number | null;
    /**
     *
     * @type {number}
     * @memberof EventNew
     */
    'minPlayers': number | null;
    /**
     *
     * @type {number}
     * @memberof EventNew
     */
    'entryFee': number;
    /**
     *
     * @type {EventStatus}
     * @memberof EventNew
     */
    'status': EventStatus;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'mapCode': string | null;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'eventAuthorId': string;
    /**
     *
     * @type {User}
     * @memberof EventNew
     */
    'eventAuthor'?: User;
    /**
     *
     * @type {string}
     * @memberof EventNew
     */
    'gameId': string | null;
    /**
     *
     * @type {Game}
     * @memberof EventNew
     */
    'game'?: Game | null;
    /**
     *
     * @type {Array<EventChangeHistoryNew>}
     * @memberof EventNew
     */
    'eventChangeHistory'?: Array<EventChangeHistoryNew>;
    /**
     *
     * @type {Array<LeaderboardNew>}
     * @memberof EventNew
     */
    'leaderboardNew'?: Array<LeaderboardNew>;
    /**
     *
     * @type {Array<ParticipantNew>}
     * @memberof EventNew
     */
    'participants'?: Array<ParticipantNew>;
    /**
     *
     * @type {Array<RaffleNew>}
     * @memberof EventNew
     */
    'raffleNew'?: Array<RaffleNew>;
    /**
     *
     * @type {Array<QuestSet>}
     * @memberof EventNew
     */
    'questSet'?: Array<QuestSet>;
    /**
     *
     * @type {number}
     * @memberof EventNew
     */
    'hostCut': number | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const EventStatus: {
    readonly Live: "LIVE";
    readonly Ended: "ENDED";
    readonly Tba: "TBA";
    readonly Starting: "STARTING";
    readonly Locked: "LOCKED";
    readonly Draft: "DRAFT";
};
export type EventStatus = typeof EventStatus[keyof typeof EventStatus];
/**
 *
 * @export
 * @enum {string}
 */
export declare const Frequency: {
    readonly Once: "ONCE";
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Yearly: "YEARLY";
};
export type Frequency = typeof Frequency[keyof typeof Frequency];
/**
 *
 * @export
 * @interface Game
 */
export interface Game {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'clientId': string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof Game
     */
    'createAccess': CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof Game
     */
    'createEventImageUrl': string | null;
    /**
     *
     * @type {Array<ApiKey>}
     * @memberof Game
     */
    'apiKeys'?: Array<ApiKey>;
    /**
     *
     * @type {Array<Leaderboard>}
     * @memberof Game
     */
    'leaderboards'?: Array<Leaderboard>;
    /**
     *
     * @type {Array<UserInstalledGames>}
     * @memberof Game
     */
    'userInstalledGames'?: Array<UserInstalledGames>;
    /**
     *
     * @type {Array<Quest>}
     * @memberof Game
     */
    'quests'?: Array<Quest>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof Game
     */
    'gameCode'?: Array<GameCode>;
    /**
     *
     * @type {Array<Event>}
     * @memberof Game
     */
    'events'?: Array<Event>;
    /**
     *
     * @type {Array<GameLinks>}
     * @memberof Game
     */
    'links'?: Array<GameLinks>;
    /**
     *
     * @type {Array<EventNew>}
     * @memberof Game
     */
    'eventNew'?: Array<EventNew>;
    /**
     *
     * @type {Array<GameMode>}
     * @memberof Game
     */
    'gameModes'?: Array<GameMode>;
    /**
     *
     * @type {Array<GameQuestTemplate>}
     * @memberof Game
     */
    'gameQuestTemplates'?: Array<GameQuestTemplate>;
}
/**
 *
 * @export
 * @interface GameCode
 */
export interface GameCode {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'updatedAt': string;
    /**
     *
     * @type {GameCodeType}
     * @memberof GameCode
     */
    'type': GameCodeType;
    /**
     *
     * @type {GameCodeStatus}
     * @memberof GameCode
     */
    'status': GameCodeStatus;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'usedDate': string | null;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'userId': string | null;
    /**
     *
     * @type {User}
     * @memberof GameCode
     */
    'user'?: User | null;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'eventId': string | null;
    /**
     *
     * @type {Event}
     * @memberof GameCode
     */
    'event'?: Event | null;
    /**
     *
     * @type {string}
     * @memberof GameCode
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof GameCode
     */
    'game'?: Game;
}
/**
 *
 * @export
 * @interface GameCodeDetailed
 */
export interface GameCodeDetailed {
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {GameCodeType}
     * @memberof GameCodeDetailed
     */
    'type': GameCodeType;
    /**
     *
     * @type {GameCodeStatus}
     * @memberof GameCodeDetailed
     */
    'status': GameCodeStatus;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'usedDate': string | null;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'userId': string | null;
    /**
     *
     * @type {User}
     * @memberof GameCodeDetailed
     */
    'user'?: User | null;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'eventId': string | null;
    /**
     *
     * @type {Event}
     * @memberof GameCodeDetailed
     */
    'event'?: Event;
    /**
     *
     * @type {string}
     * @memberof GameCodeDetailed
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof GameCodeDetailed
     */
    'game'?: Game;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const GameCodeStatus: {
    readonly Used: "USED";
    readonly NotUsed: "NOT_USED";
};
export type GameCodeStatus = typeof GameCodeStatus[keyof typeof GameCodeStatus];
/**
 *
 * @export
 * @enum {string}
 */
export declare const GameCodeType: {
    readonly Linking: "LINKING";
    readonly LeaderboardWin: "LEADERBOARD_WIN";
};
export type GameCodeType = typeof GameCodeType[keyof typeof GameCodeType];
/**
 *
 * @export
 * @interface GameDetailed
 */
export interface GameDetailed {
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'clientId': string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof GameDetailed
     */
    'createAccess': CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof GameDetailed
     */
    'createEventImageUrl': string | null;
    /**
     *
     * @type {Array<ApiKey>}
     * @memberof GameDetailed
     */
    'apiKeys'?: Array<ApiKey>;
    /**
     *
     * @type {Array<Leaderboard>}
     * @memberof GameDetailed
     */
    'leaderboards'?: Array<Leaderboard>;
    /**
     *
     * @type {Array<UserInstalledGames>}
     * @memberof GameDetailed
     */
    'userInstalledGames'?: Array<UserInstalledGames>;
    /**
     *
     * @type {Array<Quest>}
     * @memberof GameDetailed
     */
    'quests'?: Array<Quest>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof GameDetailed
     */
    'gameCode'?: Array<GameCode>;
    /**
     *
     * @type {Array<Event>}
     * @memberof GameDetailed
     */
    'events'?: Array<Event>;
    /**
     *
     * @type {Array<SocialLink>}
     * @memberof GameDetailed
     */
    'links': Array<SocialLink>;
    /**
     *
     * @type {Array<EventNew>}
     * @memberof GameDetailed
     */
    'eventNew'?: Array<EventNew>;
    /**
     *
     * @type {Array<GameMode>}
     * @memberof GameDetailed
     */
    'gameModes'?: Array<GameMode>;
    /**
     *
     * @type {Array<GameQuestTemplate>}
     * @memberof GameDetailed
     */
    'gameQuestTemplates'?: Array<GameQuestTemplate>;
    /**
     *
     * @type {Array<Banner>}
     * @memberof GameDetailed
     */
    'banners': Array<Banner>;
}
/**
 *
 * @export
 * @interface GameLinks
 */
export interface GameLinks {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GameLinks
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameLinks
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameLinks
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GameLinks
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof GameLinks
     */
    'game'?: Game | null;
    /**
     *
     * @type {LinkType}
     * @memberof GameLinks
     */
    'linkType': LinkType;
    /**
     *
     * @type {string}
     * @memberof GameLinks
     */
    'url': string;
    /**
     *
     * @type {number}
     * @memberof GameLinks
     */
    'order': number;
    /**
     *
     * @type {AccessStatus}
     * @memberof GameLinks
     */
    'status': AccessStatus;
}
/**
 *
 * @export
 * @interface GameMode
 */
export interface GameMode {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'imageUrl': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'mappingId': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'altScoreTextAlias': string | null;
    /**
     *
     * @type {string}
     * @memberof GameMode
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof GameMode
     */
    'game'?: Game | null;
    /**
     *
     * @type {Array<LeaderboardFactorNew>}
     * @memberof GameMode
     */
    'leaderboardFactors'?: Array<LeaderboardFactorNew>;
}
/**
 *
 * @export
 * @interface GameQuestTemplate
 */
export interface GameQuestTemplate {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'imageUrl': string;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'mappingId': string;
    /**
     *
     * @type {ActivityType}
     * @memberof GameQuestTemplate
     */
    'activityType': ActivityType;
    /**
     *
     * @type {QuestType}
     * @memberof GameQuestTemplate
     */
    'questType': QuestType;
    /**
     *
     * @type {number}
     * @memberof GameQuestTemplate
     */
    'target': number;
    /**
     *
     * @type {QuestDifficulty}
     * @memberof GameQuestTemplate
     */
    'difficulty': QuestDifficulty;
    /**
     *
     * @type {string}
     * @memberof GameQuestTemplate
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof GameQuestTemplate
     */
    'game'?: Game;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Gender: {
    readonly Male: "male";
    readonly Female: "female";
    readonly Other: "other";
    readonly Unknown: "unknown";
};
export type Gender = typeof Gender[keyof typeof Gender];
/**
 * numOfCodes: the number of codes to generate, eventId: the id of the event to generate codes for
 * @export
 * @interface GenerateLeaderboardWinCodesRequest
 */
export interface GenerateLeaderboardWinCodesRequest {
    /**
     *
     * @type {string}
     * @memberof GenerateLeaderboardWinCodesRequest
     */
    'eventId': string;
    /**
     *
     * @type {number}
     * @memberof GenerateLeaderboardWinCodesRequest
     */
    'numOfCodes': number;
}
/**
 *
 * @export
 * @interface GetEventDetailedResponse
 */
export interface GetEventDetailedResponse {
    /**
     *
     * @type {Array<GetQuestResponse>}
     * @memberof GetEventDetailedResponse
     */
    'socialQuests': Array<GetQuestResponse>;
    /**
     *
     * @type {Array<GetQuestResponse>}
     * @memberof GetEventDetailedResponse
     */
    'gameQuests': Array<GetQuestResponse>;
    /**
     *
     * @type {GetEventDetailedResponseLeaderboard}
     * @memberof GetEventDetailedResponse
     */
    'leaderboard': GetEventDetailedResponseLeaderboard;
    /**
     *
     * @type {Array<GetEventDetailedResponseRaffleInner>}
     * @memberof GetEventDetailedResponse
     */
    'raffle': Array<GetEventDetailedResponseRaffleInner>;
    /**
     *
     * @type {Array<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>}
     * @memberof GetEventDetailedResponse
     */
    'banners': Array<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>;
    /**
     *
     * @type {PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId}
     * @memberof GetEventDetailedResponse
     */
    'event': PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId;
}
/**
 *
 * @export
 * @interface GetEventDetailedResponseLeaderboard
 */
export interface GetEventDetailedResponseLeaderboard {
    /**
     *
     * @type {Array<GetEventDetailedResponseLeaderboardRewardsInner>}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'rewards': Array<GetEventDetailedResponseLeaderboardRewardsInner>;
    /**
     *
     * @type {boolean}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'rewardsProcessed': boolean | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'scheduleId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'objectId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'type': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'factorId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'scoreTextAlias': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboard
     */
    'id': string | null;
}
/**
 *
 * @export
 * @interface GetEventDetailedResponseLeaderboardRewardsInner
 */
export interface GetEventDetailedResponseLeaderboardRewardsInner {
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'productType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'productImageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'productSubtitle'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'productTitle'?: string | null;
    /**
     *
     * @type {number}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'rewardPlace': number;
    /**
     *
     * @type {number}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'productId': string;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseLeaderboardRewardsInner
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetEventDetailedResponseRaffleInner
 */
export interface GetEventDetailedResponseRaffleInner {
    /**
     *
     * @type {Array<GetEventDetailedResponseRaffleInnerRewardsInner>}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'rewards': Array<GetEventDetailedResponseRaffleInnerRewardsInner>;
    /**
     *
     * @type {boolean}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'shouldExcludePreviousWinners': boolean;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'raffleTicketProductId': string;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'scheduleId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInner
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetEventDetailedResponseRaffleInnerRewardsInner
 */
export interface GetEventDetailedResponseRaffleInnerRewardsInner {
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'productType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'productImageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'productSubtitle'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'productTitle'?: string | null;
    /**
     *
     * @type {number}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'prizeProductId': string;
    /**
     *
     * @type {string}
     * @memberof GetEventDetailedResponseRaffleInnerRewardsInner
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetEventWithLobbyDetailsResponse
 */
export interface GetEventWithLobbyDetailsResponse {
    /**
     *
     * @type {number}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'joiningFee': number;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'statusText'?: string;
    /**
     *
     * @type {Array<LobbyItems>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'lobbyItems': Array<LobbyItems>;
    /**
     *
     * @type {Array<LobbyPrize>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'lobbyPrizes': Array<LobbyPrize>;
    /**
     *
     * @type {Array<SocialLink>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'gameLinks': Array<SocialLink>;
    /**
     *
     * @type {Array<Banner>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'banners': Array<Banner>;
    /**
     *
     * @type {Array<Quest>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'quest': Array<Quest>;
    /**
     *
     * @type {Array<Leaderboard>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'leaderboards': Array<Leaderboard>;
    /**
     *
     * @type {Array<Draw>}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'draws': Array<Draw>;
    /**
     *
     * @type {Game}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'game': Game;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'videoUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'youtubeId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'mapCode': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'subtitle': string;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'title': string;
    /**
     *
     * @type {EventStatus}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'status': EventStatus;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetEventWithLobbyDetailsResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetExternalApiKeyResponse
 */
export interface GetExternalApiKeyResponse {
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'gameId': string;
    /**
     *
     * @type {AccessStatus}
     * @memberof GetExternalApiKeyResponse
     */
    'status': AccessStatus;
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'expireAt': string | null;
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetExternalApiKeyResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetGameApiKeysResponse
 */
export interface GetGameApiKeysResponse {
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'expireAt': string | null;
    /**
     *
     * @type {AccessStatus}
     * @memberof GetGameApiKeysResponse
     */
    'status': AccessStatus;
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameApiKeysResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetGameLinksResponse
 */
export interface GetGameLinksResponse {
    /**
     *
     * @type {AccessStatus}
     * @memberof GetGameLinksResponse
     */
    'status': AccessStatus;
    /**
     *
     * @type {number}
     * @memberof GetGameLinksResponse
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof GetGameLinksResponse
     */
    'url': string;
    /**
     *
     * @type {LinkType}
     * @memberof GetGameLinksResponse
     */
    'linkType': LinkType;
    /**
     *
     * @type {string}
     * @memberof GetGameLinksResponse
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof GetGameLinksResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameLinksResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameLinksResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetGameResponseDetailed
 */
export interface GetGameResponseDetailed {
    /**
     *
     * @type {Array<GetGameApiKeysResponse>}
     * @memberof GetGameResponseDetailed
     */
    'apiKeys': Array<GetGameApiKeysResponse>;
    /**
     *
     * @type {Array<GetGameLinksResponse>}
     * @memberof GetGameResponseDetailed
     */
    'links': Array<GetGameLinksResponse>;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'clientId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'createEventImageUrl': string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof GetGameResponseDetailed
     */
    'createAccess': CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGameResponseDetailed
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetGamesResponse
 */
export interface GetGamesResponse {
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'clientId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'createEventImageUrl': string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof GetGamesResponse
     */
    'createAccess': CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'iconUrl': string;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetGamesResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetLeaderboardResponse
 */
export interface GetLeaderboardResponse {
    /**
     *
     * @type {Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>}
     * @memberof GetLeaderboardResponse
     */
    'leaderboardRewards': Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>;
    /**
     *
     * @type {GetLeaderboardResponseLeaderboardSchedule}
     * @memberof GetLeaderboardResponse
     */
    'leaderboardSchedule': GetLeaderboardResponseLeaderboardSchedule;
    /**
     *
     * @type {GetLeaderboardResponseLeaderboardFactor}
     * @memberof GetLeaderboardResponse
     */
    'leaderboardFactor': GetLeaderboardResponseLeaderboardFactor;
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof GetLeaderboardResponse
     */
    'leaderboardDisplay': LeaderboardDisplay | null;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'gameId': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'eventId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetLeaderboardResponseLeaderboardFactor
 */
export interface GetLeaderboardResponseLeaderboardFactor {
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof GetLeaderboardResponseLeaderboardFactor
     */
    'type': LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardFactor
     */
    'objectId': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardFactor
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardFactor
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardFactor
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetLeaderboardResponseLeaderboardSchedule
 */
export interface GetLeaderboardResponseLeaderboardSchedule {
    /**
     *
     * @type {boolean}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'rewardsProcessed': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'scheduleProcessed': boolean;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetLeaderboardResponseLeaderboardSchedule
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetLeaderboardRewardSummaryResponse
 */
export interface GetLeaderboardRewardSummaryResponse {
    /**
     *
     * @type {PickProductIdOrTitleOrSubTitleOrIconUrlOrType}
     * @memberof GetLeaderboardRewardSummaryResponse
     */
    'product': PickProductIdOrTitleOrSubTitleOrIconUrlOrType;
    /**
     *
     * @type {number}
     * @memberof GetLeaderboardRewardSummaryResponse
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof GetLeaderboardRewardSummaryResponse
     */
    'endingPlace': number;
    /**
     *
     * @type {number}
     * @memberof GetLeaderboardRewardSummaryResponse
     */
    'startingPlace': number;
}
/**
 *
 * @export
 * @interface GetQuestResponse
 */
export interface GetQuestResponse {
    /**
     *
     * @type {Array<GetQuestResponseGoalsInner>}
     * @memberof GetQuestResponse
     */
    'goals': Array<GetQuestResponseGoalsInner>;
    /**
     *
     * @type {QuestType}
     * @memberof GetQuestResponse
     */
    'questType': QuestType;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponse
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponse
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponse
     */
    'scheduleId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetQuestResponseGoalsInner
 */
export interface GetQuestResponseGoalsInner {
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardProductType': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardProductImageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardProductSubtitle': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardProductTitle': string | null;
    /**
     *
     * @type {number}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardQuantity': number | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'rewardProductId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'goalProductId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'openUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'objectId': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'instructions': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'activity': string;
    /**
     *
     * @type {number}
     * @memberof GetQuestResponseGoalsInner
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestResponseGoalsInner
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetQuestRewardResponse
 */
export interface GetQuestRewardResponse {
    /**
     *
     * @type {string}
     * @memberof GetQuestRewardResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestRewardResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestRewardResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof GetQuestRewardResponse
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof GetQuestRewardResponse
     */
    'productId': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestRewardResponse
     */
    'goalId': string;
    /**
     *
     * @type {PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType}
     * @memberof GetQuestRewardResponse
     */
    'product': PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType;
}
/**
 *
 * @export
 * @interface GetQuestScheduleResponse
 */
export interface GetQuestScheduleResponse {
    /**
     *
     * @type {boolean}
     * @memberof GetQuestScheduleResponse
     */
    'processed': boolean;
    /**
     *
     * @type {string}
     * @memberof GetQuestScheduleResponse
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof GetQuestScheduleResponse
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestScheduleResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestScheduleResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetQuestScheduleResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetRaffleResultsResponse
 */
export interface GetRaffleResultsResponse {
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'rewardIconUrl'?: string | null;
    /**
     *
     * @type {ProductType}
     * @memberof GetRaffleResultsResponse
     */
    'rewardType'?: ProductType;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'rewardSubTitle'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'rewardTitle'?: string;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'rewardId'?: string;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'userId': string;
    /**
     *
     * @type {UserDrawStatus}
     * @memberof GetRaffleResultsResponse
     */
    'status': UserDrawStatus;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetRaffleResultsResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetToken200Response
 */
export interface GetToken200Response {
    /**
     *
     * @type {string}
     * @memberof GetToken200Response
     */
    'token_type': string;
    /**
     *
     * @type {number}
     * @memberof GetToken200Response
     */
    'expires_in': number;
    /**
     *
     * @type {string}
     * @memberof GetToken200Response
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface GetUserConnectionResponse
 */
export interface GetUserConnectionResponse {
    /**
     *
     * @type {string}
     * @memberof GetUserConnectionResponse
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof GetUserConnectionResponse
     */
    'sub': string | null;
    /**
     *
     * @type {ConnectionType}
     * @memberof GetUserConnectionResponse
     */
    'socialConnectionType': ConnectionType;
    /**
     *
     * @type {string}
     * @memberof GetUserConnectionResponse
     */
    'nickname': string | null;
    /**
     *
     * @type {string}
     * @memberof GetUserConnectionResponse
     */
    'email': string | null;
    /**
     *
     * @type {string}
     * @memberof GetUserConnectionResponse
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GetUserJoinedStatus200Response
 */
export interface GetUserJoinedStatus200Response {
    /**
     *
     * @type {string}
     * @memberof GetUserJoinedStatus200Response
     */
    'timestamp': string | null;
    /**
     *
     * @type {boolean}
     * @memberof GetUserJoinedStatus200Response
     */
    'joined': boolean;
}
/**
 *
 * @export
 * @interface GetUserRole
 */
export interface GetUserRole {
    /**
     *
     * @type {string}
     * @memberof GetUserRole
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GetUserRole
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GetUserRole
     */
    'updatedAt': string;
    /**
     *
     * @type {UserRoleType}
     * @memberof GetUserRole
     */
    'role': UserRoleType;
    /**
     *
     * @type {string}
     * @memberof GetUserRole
     */
    'userId': string;
    /**
     *
     * @type {PickUserIdOrEmailOrUsername}
     * @memberof GetUserRole
     */
    'user': PickUserIdOrEmailOrUsername;
}
/**
 *
 * @export
 * @interface Goal
 */
export interface Goal {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'title': string;
    /**
     *
     * @type {number}
     * @memberof Goal
     */
    'target': number;
    /**
     *
     * @type {ActivityType}
     * @memberof Goal
     */
    'activity': ActivityType;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'instructions': string | null;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'objectId': string | null;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'openUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Goal
     */
    'questId': string;
    /**
     *
     * @type {Quest}
     * @memberof Goal
     */
    'quest'?: Quest | null;
    /**
     *
     * @type {Array<GoalAttribute>}
     * @memberof Goal
     */
    'goalAttributes'?: Array<GoalAttribute>;
    /**
     *
     * @type {Array<GoalProduct>}
     * @memberof Goal
     */
    'goalProducts'?: Array<GoalProduct>;
}
/**
 *
 * @export
 * @interface GoalAttribute
 */
export interface GoalAttribute {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GoalAttribute
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GoalAttribute
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GoalAttribute
     */
    'updatedAt': string;
    /**
     *
     * @type {GoalAttributeKey}
     * @memberof GoalAttribute
     */
    'key': GoalAttributeKey;
    /**
     *
     * @type {string}
     * @memberof GoalAttribute
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof GoalAttribute
     */
    'goalId': string;
    /**
     *
     * @type {Goal}
     * @memberof GoalAttribute
     */
    'goal'?: Goal;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const GoalAttributeKey: {
    readonly TargetUserId: "TARGET_USER_ID";
};
export type GoalAttributeKey = typeof GoalAttributeKey[keyof typeof GoalAttributeKey];
/**
 *
 * @export
 * @interface GoalProduct
 */
export interface GoalProduct {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof GoalProduct
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof GoalProduct
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof GoalProduct
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof GoalProduct
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof GoalProduct
     */
    'goalId': string;
    /**
     *
     * @type {Goal}
     * @memberof GoalProduct
     */
    'goal'?: Goal;
    /**
     *
     * @type {string}
     * @memberof GoalProduct
     */
    'productId': string;
    /**
     *
     * @type {Product}
     * @memberof GoalProduct
     */
    'product'?: Product;
}
/**
 *
 * @export
 * @interface GoalWithProgress
 */
export interface GoalWithProgress {
    /**
     *
     * @type {ActivityType}
     * @memberof GoalWithProgress
     */
    'activityType': ActivityType;
    /**
     *
     * @type {Progress}
     * @memberof GoalWithProgress
     */
    'progress': Progress | null;
    /**
     *
     * @type {GoalWithProgressReward}
     * @memberof GoalWithProgress
     */
    'reward': GoalWithProgressReward | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgress
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgress
     */
    'openUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgress
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {number}
     * @memberof GoalWithProgress
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgress
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgress
     */
    'id': string;
}
/**
 *
 * @export
 * @interface GoalWithProgressReward
 */
export interface GoalWithProgressReward {
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'gameId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'iconUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'subTitle'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'title'?: string;
    /**
     *
     * @type {ProductType}
     * @memberof GoalWithProgressReward
     */
    'productType'?: ProductType;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'productId'?: string;
    /**
     *
     * @type {number}
     * @memberof GoalWithProgressReward
     */
    'quantity'?: number;
    /**
     *
     * @type {string}
     * @memberof GoalWithProgressReward
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface InventoryItemCount
 */
export interface InventoryItemCount {
    /**
     *
     * @type {number}
     * @memberof InventoryItemCount
     */
    'userEntries': number;
    /**
     *
     * @type {number}
     * @memberof InventoryItemCount
     */
    'totalEntries': number;
}
/**
 *
 * @export
 * @interface Leaderboard
 */
export interface Leaderboard {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'altScoreTextAlias': string | null;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'eventId': string | null;
    /**
     *
     * @type {Event}
     * @memberof Leaderboard
     */
    'event'?: Event | null;
    /**
     *
     * @type {string}
     * @memberof Leaderboard
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof Leaderboard
     */
    'game'?: Game;
    /**
     *
     * @type {Array<LeaderboardSchedule>}
     * @memberof Leaderboard
     */
    'leaderboardSchedules'?: Array<LeaderboardSchedule>;
    /**
     *
     * @type {Array<LeaderboardFactor>}
     * @memberof Leaderboard
     */
    'leaderboardFactors'?: Array<LeaderboardFactor>;
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof Leaderboard
     */
    'leaderboardDisplay': LeaderboardDisplay | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const LeaderboardDisplay: {
    readonly V1: "V1";
    readonly Hidden: "HIDDEN";
};
export type LeaderboardDisplay = typeof LeaderboardDisplay[keyof typeof LeaderboardDisplay];
/**
 *
 * @export
 * @interface LeaderboardFactor
 */
export interface LeaderboardFactor {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactor
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactor
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactor
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactor
     */
    'objectId': string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof LeaderboardFactor
     */
    'type': LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactor
     */
    'leaderboardId': string;
    /**
     *
     * @type {Leaderboard}
     * @memberof LeaderboardFactor
     */
    'leaderboard'?: Leaderboard;
}
/**
 *
 * @export
 * @interface LeaderboardFactorNew
 */
export interface LeaderboardFactorNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactorNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactorNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactorNew
     */
    'updatedAt': string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof LeaderboardFactorNew
     */
    'type': LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactorNew
     */
    'gameModeId': string;
    /**
     *
     * @type {GameMode}
     * @memberof LeaderboardFactorNew
     */
    'gameMode'?: GameMode | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardFactorNew
     */
    'leaderboardId': string;
    /**
     *
     * @type {LeaderboardNew}
     * @memberof LeaderboardFactorNew
     */
    'leaderboard'?: LeaderboardNew;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const LeaderboardFactorType: {
    readonly Cumulative: "CUMULATIVE";
    readonly Milestone: "MILESTONE";
    readonly QuestCompleted: "QUEST_COMPLETED";
};
export type LeaderboardFactorType = typeof LeaderboardFactorType[keyof typeof LeaderboardFactorType];
/**
 *
 * @export
 * @interface LeaderboardNew
 */
export interface LeaderboardNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'scoreTextAlias': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'altScoreTextAlias': string | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardNew
     */
    'eventId': string | null;
    /**
     *
     * @type {EventNew}
     * @memberof LeaderboardNew
     */
    'event'?: EventNew | null;
    /**
     *
     * @type {Array<LeaderboardFactorNew>}
     * @memberof LeaderboardNew
     */
    'leaderboardFactors'?: Array<LeaderboardFactorNew>;
}
/**
 *
 * @export
 * @interface LeaderboardResult
 */
export interface LeaderboardResult {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardResult
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardResult
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardResult
     */
    'updatedAt': string;
    /**
     *
     * @type {UserDrawStatus}
     * @memberof LeaderboardResult
     */
    'status': UserDrawStatus;
    /**
     *
     * @type {string}
     * @memberof LeaderboardResult
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof LeaderboardResult
     */
    'user'?: User | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardResult
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {LeaderboardSchedule}
     * @memberof LeaderboardResult
     */
    'leaderboardSchedule'?: LeaderboardSchedule | null;
    /**
     *
     * @type {Array<LeaderboardReward>}
     * @memberof LeaderboardResult
     */
    'leaderboardRewards'?: Array<LeaderboardReward>;
}
/**
 *
 * @export
 * @interface LeaderboardReward
 */
export interface LeaderboardReward {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof LeaderboardReward
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof LeaderboardReward
     */
    'rewardPlace': number;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {LeaderboardSchedule}
     * @memberof LeaderboardReward
     */
    'leaderboardSchedule'?: LeaderboardSchedule;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'productId': string;
    /**
     *
     * @type {Product}
     * @memberof LeaderboardReward
     */
    'product'?: Product;
    /**
     *
     * @type {string}
     * @memberof LeaderboardReward
     */
    'leaderboardResultId': string | null;
    /**
     *
     * @type {LeaderboardResult}
     * @memberof LeaderboardReward
     */
    'leaderboardResult'?: LeaderboardResult | null;
}
/**
 *
 * @export
 * @interface LeaderboardRewardDetailed
 */
export interface LeaderboardRewardDetailed {
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof LeaderboardRewardDetailed
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof LeaderboardRewardDetailed
     */
    'rewardPlace': number;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {LeaderboardSchedule}
     * @memberof LeaderboardRewardDetailed
     */
    'leaderboardSchedule'?: LeaderboardSchedule;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'productId': string;
    /**
     *
     * @type {LeaderboardRewardDetailedAllOfProduct}
     * @memberof LeaderboardRewardDetailed
     */
    'product': LeaderboardRewardDetailedAllOfProduct;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailed
     */
    'leaderboardResultId': string | null;
    /**
     *
     * @type {LeaderboardResult}
     * @memberof LeaderboardRewardDetailed
     */
    'leaderboardResult'?: LeaderboardResult | null;
}
/**
 *
 * @export
 * @interface LeaderboardRewardDetailedAllOfProduct
 */
export interface LeaderboardRewardDetailedAllOfProduct {
    /**
     *
     * @type {ProductType}
     * @memberof LeaderboardRewardDetailedAllOfProduct
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailedAllOfProduct
     */
    'iconUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailedAllOfProduct
     */
    'subTitle'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailedAllOfProduct
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardRewardDetailedAllOfProduct
     */
    'id': string;
}
/**
 *
 * @export
 * @interface LeaderboardSchedule
 */
export interface LeaderboardSchedule {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'endTime': string | null;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'recurring': boolean;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'scheduleProcessed': boolean;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'rewardsProcessed': boolean;
    /**
     *
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'leaderboardId': string;
    /**
     *
     * @type {Leaderboard}
     * @memberof LeaderboardSchedule
     */
    'leaderboard'?: Leaderboard;
    /**
     *
     * @type {Array<LeaderboardReward>}
     * @memberof LeaderboardSchedule
     */
    'leaderboardRewards'?: Array<LeaderboardReward>;
    /**
     *
     * @type {Array<LeaderboardScore>}
     * @memberof LeaderboardSchedule
     */
    'scores'?: Array<LeaderboardScore>;
    /**
     *
     * @type {Array<LeaderboardResult>}
     * @memberof LeaderboardSchedule
     */
    'leaderboardResults'?: Array<LeaderboardResult>;
}
/**
 *
 * @export
 * @interface LeaderboardScheduleDetailed
 */
export interface LeaderboardScheduleDetailed {
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'endTime': string | null;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardScheduleDetailed
     */
    'recurring': boolean;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardScheduleDetailed
     */
    'scheduleProcessed': boolean;
    /**
     *
     * @type {boolean}
     * @memberof LeaderboardScheduleDetailed
     */
    'rewardsProcessed': boolean;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScheduleDetailed
     */
    'leaderboardId': string;
    /**
     *
     * @type {Leaderboard}
     * @memberof LeaderboardScheduleDetailed
     */
    'leaderboard': Leaderboard;
    /**
     *
     * @type {Array<LeaderboardRewardDetailed>}
     * @memberof LeaderboardScheduleDetailed
     */
    'leaderboardRewards': Array<LeaderboardRewardDetailed>;
    /**
     *
     * @type {Array<LeaderboardScoreDetailed>}
     * @memberof LeaderboardScheduleDetailed
     */
    'scores': Array<LeaderboardScoreDetailed>;
    /**
     *
     * @type {Array<LeaderboardResult>}
     * @memberof LeaderboardScheduleDetailed
     */
    'leaderboardResults'?: Array<LeaderboardResult>;
}
/**
 *
 * @export
 * @interface LeaderboardScore
 */
export interface LeaderboardScore {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScore
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScore
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScore
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof LeaderboardScore
     */
    'score': number;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScore
     */
    'playerId': string;
    /**
     *
     * @type {User}
     * @memberof LeaderboardScore
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScore
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {LeaderboardSchedule}
     * @memberof LeaderboardScore
     */
    'leaderboardSchedule'?: LeaderboardSchedule;
}
/**
 *
 * @export
 * @interface LeaderboardScoreDetailed
 */
export interface LeaderboardScoreDetailed {
    /**
     *
     * @type {string}
     * @memberof LeaderboardScoreDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScoreDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScoreDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof LeaderboardScoreDetailed
     */
    'score': number;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScoreDetailed
     */
    'playerId': string;
    /**
     *
     * @type {UserDetailed}
     * @memberof LeaderboardScoreDetailed
     */
    'user': UserDetailed;
    /**
     *
     * @type {string}
     * @memberof LeaderboardScoreDetailed
     */
    'leaderboardScheduleId': string;
    /**
     *
     * @type {LeaderboardSchedule}
     * @memberof LeaderboardScoreDetailed
     */
    'leaderboardSchedule'?: LeaderboardSchedule;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const LinkType: {
    readonly X: "X";
    readonly Discord: "DISCORD";
    readonly Website: "WEBSITE";
    readonly Facebook: "FACEBOOK";
    readonly Youtube: "YOUTUBE";
    readonly Linkedin: "LINKEDIN";
    readonly Instagram: "INSTAGRAM";
    readonly Tiktok: "TIKTOK";
    readonly Reddit: "REDDIT";
    readonly Twitch: "TWITCH";
    readonly Game: "GAME";
};
export type LinkType = typeof LinkType[keyof typeof LinkType];
/**
 *
 * @export
 * @interface LinkedAccount
 */
export interface LinkedAccount {
    /**
     *
     * @type {Game}
     * @memberof LinkedAccount
     */
    'game': Game;
    /**
     *
     * @type {User}
     * @memberof LinkedAccount
     */
    'externalUser': User;
}
/**
 *
 * @export
 * @interface LobbyItems
 */
export interface LobbyItems {
    /**
     *
     * @type {string}
     * @memberof LobbyItems
     */
    'value': string | null;
    /**
     *
     * @type {string}
     * @memberof LobbyItems
     */
    'key': LobbyItemsKeyEnum;
}
export declare const LobbyItemsKeyEnum: {
    readonly GameMode: "Game Mode";
    readonly PrizePool: "Prize Pool";
    readonly Raffle: "Raffle";
    readonly Joiners: "Joiners";
};
export type LobbyItemsKeyEnum = typeof LobbyItemsKeyEnum[keyof typeof LobbyItemsKeyEnum];
/**
 *
 * @export
 * @interface LobbyPrize
 */
export interface LobbyPrize {
    /**
     *
     * @type {string}
     * @memberof LobbyPrize
     */
    'assetType': LobbyPrizeAssetTypeEnum;
    /**
     *
     * @type {string}
     * @memberof LobbyPrize
     */
    'unit': string;
    /**
     *
     * @type {number}
     * @memberof LobbyPrize
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof LobbyPrize
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof LobbyPrize
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof LobbyPrize
     */
    'id': string;
}
export declare const LobbyPrizeAssetTypeEnum: {
    readonly Icon: "icon";
    readonly Image: "image";
};
export type LobbyPrizeAssetTypeEnum = typeof LobbyPrizeAssetTypeEnum[keyof typeof LobbyPrizeAssetTypeEnum];
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'updatedAt': string;
    /**
     *
     * @type {NotificationType}
     * @memberof Notification
     */
    'type': NotificationType;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'objectId': string | null;
    /**
     *
     * @type {boolean}
     * @memberof Notification
     */
    'seen': boolean;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'subtitle': string | null;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof Notification
     */
    'user'?: User;
}
/**
 *
 * @export
 * @interface NotificationDetailed
 */
export interface NotificationDetailed {
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {NotificationType}
     * @memberof NotificationDetailed
     */
    'type': NotificationType;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'objectId': string | null;
    /**
     *
     * @type {boolean}
     * @memberof NotificationDetailed
     */
    'seen': boolean;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'subtitle': string | null;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof NotificationDetailed
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof NotificationDetailed
     */
    'user'?: User;
    /**
     *
     * @type {UserDraw}
     * @memberof NotificationDetailed
     */
    'userDraw': UserDraw | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const NotificationType: {
    readonly Event: "EVENT";
    readonly CaseReward: "CASE_REWARD";
    readonly ReferralCodeUsed: "REFERRAL_CODE_USED";
    readonly UnusedReferralsRemaining: "UNUSED_REFERRALS_REMAINING";
    readonly UnopenedCase: "UNOPENED_CASE";
    readonly LeaderboardWinner: "LEADERBOARD_WINNER";
    readonly RaffleWinner: "RAFFLE_WINNER";
    readonly EmailNotConnected: "EMAIL_NOT_CONNECTED";
    readonly PrizeClaimed: "PRIZE_CLAIMED";
    readonly PrizeDelivered: "PRIZE_DELIVERED";
    readonly ExportWallet: "EXPORT_WALLET";
};
export type NotificationType = typeof NotificationType[keyof typeof NotificationType];
/**
 *
 * @export
 * @interface PaginatedAny
 */
export interface PaginatedAny {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedAny
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<any>}
     * @memberof PaginatedAny
     */
    'data': Array<any>;
}
/**
 *
 * @export
 * @interface PaginatedEventGame
 */
export interface PaginatedEventGame {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedEventGame
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<EventGame>}
     * @memberof PaginatedEventGame
     */
    'data': Array<EventGame>;
}
/**
 *
 * @export
 * @interface PaginatedGetEventWithLobbyDetailsResponse
 */
export interface PaginatedGetEventWithLobbyDetailsResponse {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedGetEventWithLobbyDetailsResponse
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<GetEventWithLobbyDetailsResponse>}
     * @memberof PaginatedGetEventWithLobbyDetailsResponse
     */
    'data': Array<GetEventWithLobbyDetailsResponse>;
}
/**
 *
 * @export
 * @interface PaginatedGetEventWithLobbyDetailsResponsePagination
 */
export interface PaginatedGetEventWithLobbyDetailsResponsePagination {
    /**
     *
     * @type {number}
     * @memberof PaginatedGetEventWithLobbyDetailsResponsePagination
     */
    'totalItems': number;
    /**
     *
     * @type {number}
     * @memberof PaginatedGetEventWithLobbyDetailsResponsePagination
     */
    'currentPage': number;
    /**
     *
     * @type {number}
     * @memberof PaginatedGetEventWithLobbyDetailsResponsePagination
     */
    'pageSize': number;
    /**
     *
     * @type {number}
     * @memberof PaginatedGetEventWithLobbyDetailsResponsePagination
     */
    'totalPages': number;
}
/**
 *
 * @export
 * @interface PaginatedNotificationDetailed
 */
export interface PaginatedNotificationDetailed {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedNotificationDetailed
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<NotificationDetailed>}
     * @memberof PaginatedNotificationDetailed
     */
    'data': Array<NotificationDetailed>;
}
/**
 *
 * @export
 * @interface PaginatedQuestGoal
 */
export interface PaginatedQuestGoal {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedQuestGoal
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<QuestGoal>}
     * @memberof PaginatedQuestGoal
     */
    'data': Array<QuestGoal>;
}
/**
 *
 * @export
 * @interface PaginatedTransactionDetailed
 */
export interface PaginatedTransactionDetailed {
    /**
     *
     * @type {PaginatedGetEventWithLobbyDetailsResponsePagination}
     * @memberof PaginatedTransactionDetailed
     */
    'pagination': PaginatedGetEventWithLobbyDetailsResponsePagination;
    /**
     *
     * @type {Array<TransactionDetailed>}
     * @memberof PaginatedTransactionDetailed
     */
    'data': Array<TransactionDetailed>;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateAnnouncementArgs
 */
export interface PartialCreateAnnouncementArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateAnnouncementArgs
     */
    'message'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PartialCreateAnnouncementArgs
     */
    'status'?: boolean;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateBannerArgs
 */
export interface PartialCreateBannerArgs {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateBannerArgs
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {BannerLocation}
     * @memberof PartialCreateBannerArgs
     */
    'bannerLocation'?: BannerLocation;
    /**
     *
     * @type {string}
     * @memberof PartialCreateBannerArgs
     */
    'eventId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateBannerArgs
     */
    'desktopImageUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateBannerArgs
     */
    'mobileImageUrl'?: string;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateBannerArgs
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateBannerArgs
     */
    'logoUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateBannerArgs
     */
    'alt'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateEventArgs
 */
export interface PartialCreateEventArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'subtitle'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'gameId'?: string;
    /**
     *
     * @type {EventStatus}
     * @memberof PartialCreateEventArgs
     */
    'status'?: EventStatus;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateEventArgs
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateEventArgs
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'imageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'mapCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'youtubeId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateEventArgs
     */
    'videoUrl'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateGameArgs
 */
export interface PartialCreateGameArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'studioId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'iconUrl'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof PartialCreateGameArgs
     */
    'createAccess'?: CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'createEventImageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameArgs
     */
    'clientId'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateGameLinkArgs
 */
export interface PartialCreateGameLinkArgs {
    /**
     *
     * @type {AccessStatus}
     * @memberof PartialCreateGameLinkArgs
     */
    'status'?: AccessStatus;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameLinkArgs
     */
    'gameId'?: string;
    /**
     *
     * @type {LinkType}
     * @memberof PartialCreateGameLinkArgs
     */
    'linkType'?: LinkType;
    /**
     *
     * @type {string}
     * @memberof PartialCreateGameLinkArgs
     */
    'url'?: string;
    /**
     *
     * @type {number}
     * @memberof PartialCreateGameLinkArgs
     */
    'order'?: number;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateLeaderboardArgs
 */
export interface PartialCreateLeaderboardArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardArgs
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardArgs
     */
    'scoreTextAlias'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardArgs
     */
    'eventId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardArgs
     */
    'gameId'?: string;
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof PartialCreateLeaderboardArgs
     */
    'leaderboardDisplay'?: LeaderboardDisplay;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateLeaderboardFactorArgs
 */
export interface PartialCreateLeaderboardFactorArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardFactorArgs
     */
    'objectId'?: string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof PartialCreateLeaderboardFactorArgs
     */
    'type'?: LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardFactorArgs
     */
    'leaderboardId'?: string;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateLeaderboardScheduleArgs
 */
export interface PartialCreateLeaderboardScheduleArgs {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateLeaderboardScheduleArgs
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialCreateLeaderboardScheduleArgs
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateLeaderboardScheduleArgs
     */
    'leaderboardId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PartialCreateLeaderboardScheduleArgs
     */
    'scheduleProcessed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PartialCreateLeaderboardScheduleArgs
     */
    'rewardsProcessed'?: boolean;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateProductArgs
 */
export interface PartialCreateProductArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateProductArgs
     */
    'title'?: string;
    /**
     *
     * @type {ProductType}
     * @memberof PartialCreateProductArgs
     */
    'type'?: ProductType;
    /**
     *
     * @type {string}
     * @memberof PartialCreateProductArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateProductArgs
     */
    'gameId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateProductArgs
     */
    'iconUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateProductArgs
     */
    'subTitle'?: string | null;
    /**
     *
     * @type {number}
     * @memberof PartialCreateProductArgs
     */
    'initialQuantity'?: number;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateQuestGoalArgs
 */
export interface PartialCreateQuestGoalArgs {
    /**
     *
     * @type {QuestType}
     * @memberof PartialCreateQuestGoalArgs
     */
    'type'?: QuestType;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestGoalArgs
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestGoalArgs
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof PartialCreateQuestGoalArgs
     */
    'target'?: number;
    /**
     *
     * @type {ActivityType}
     * @memberof PartialCreateQuestGoalArgs
     */
    'activity'?: ActivityType;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestGoalArgs
     */
    'objectId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestGoalArgs
     */
    'openUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestGoalArgs
     */
    'bannerUrl'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateQuestRewardArgs
 */
export interface PartialCreateQuestRewardArgs {
    /**
     *
     * @type {number}
     * @memberof PartialCreateQuestRewardArgs
     */
    'quantity'?: number;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestRewardArgs
     */
    'productId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestRewardArgs
     */
    'goalId'?: string;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialCreateQuestScheduleArgs
 */
export interface PartialCreateQuestScheduleArgs {
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestScheduleArgs
     */
    'questId'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestScheduleArgs
     */
    'startTime'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialCreateQuestScheduleArgs
     */
    'endTime'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialPickPrismaBannerUncheckedCreateInputEndTimeOrLogoUrlOrAlt
 */
export interface PartialPickPrismaBannerUncheckedCreateInputEndTimeOrLogoUrlOrAlt {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialPickPrismaBannerUncheckedCreateInputEndTimeOrLogoUrlOrAlt
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaBannerUncheckedCreateInputEndTimeOrLogoUrlOrAlt
     */
    'logoUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaBannerUncheckedCreateInputEndTimeOrLogoUrlOrAlt
     */
    'alt'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
 */
export interface PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl {
    /**
     *
     * @type {EventStatus}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'status'?: EventStatus;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'imageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'mapCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'youtubeId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaEventUncheckedCreateInputStartTimeOrEndTimeOrStatusOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrl
     */
    'videoUrl'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId
 */
export interface PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId {
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId
     */
    'description'?: string | null;
    /**
     *
     * @type {CreateEventGameAccess}
     * @memberof PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId
     */
    'createAccess'?: CreateEventGameAccess;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId
     */
    'createEventImageUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaGameUncheckedCreateInputDescriptionOrCreateAccessOrCreateEventImageUrlOrClientId
     */
    'clientId'?: string | null;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId
 */
export interface PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId {
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId
     */
    'objectId'?: string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId
     */
    'type'?: LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId
     */
    'leaderboardId'?: string;
}
/**
 * Make all properties in T optional
 * @export
 * @interface PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
 */
export interface PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId {
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'gameId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'iconUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'subTitle'?: string | null;
    /**
     *
     * @type {number}
     * @memberof PartialPickPrismaProductUncheckedCreateInputSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'initialQuantity'?: number;
}
/**
 *
 * @export
 * @interface Participant
 */
export interface Participant {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof Participant
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof Participant
     */
    'eventId': string;
    /**
     *
     * @type {Event}
     * @memberof Participant
     */
    'event'?: Event;
}
/**
 *
 * @export
 * @interface ParticipantNew
 */
export interface ParticipantNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ParticipantNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ParticipantNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ParticipantNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ParticipantNew
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof ParticipantNew
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof ParticipantNew
     */
    'eventId': string;
    /**
     *
     * @type {EventNew}
     * @memberof ParticipantNew
     */
    'event'?: EventNew;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
 */
export interface PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt {
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'endTime': string | null;
    /**
     *
     * @type {BannerLocation}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'bannerLocation': BannerLocation;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'eventId': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'logoUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'desktopImageUrl': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'mobileImageUrl': string;
    /**
     *
     * @type {string}
     * @memberof PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt
     */
    'alt': string | null;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
 */
export interface PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId {
    /**
     *
     * @type {EventStatus}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'status': EventStatus;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'subtitle': string;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'imageUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'mapCode': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'youtubeId': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'videoUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId
     */
    'gameId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
 */
export interface PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId {
    /**
     *
     * @type {string}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'productId': string;
    /**
     *
     * @type {string}
     * @memberof PickGoalProductIdOrCreatedAtOrUpdatedAtOrQuantityOrProductIdOrGoalId
     */
    'goalId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
 */
export interface PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType {
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
     */
    'objectId': string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType
     */
    'type': LeaderboardFactorType;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
 */
export interface PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct {
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'quantity': number;
    /**
     *
     * @type {number}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'rewardPlace': number;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'productId': string;
    /**
     *
     * @type {Product}
     * @memberof PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct
     */
    'product'?: Product;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
 */
export interface PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed {
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'startTime': string | null;
    /**
     *
     * @type {string}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'endTime': string | null;
    /**
     *
     * @type {boolean}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'scheduleProcessed': boolean;
    /**
     *
     * @type {boolean}
     * @memberof PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed
     */
    'rewardsProcessed': boolean;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus
 */
export interface PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus {
    /**
     *
     * @type {string}
     * @memberof PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus
     */
    'message': string;
    /**
     *
     * @type {boolean}
     * @memberof PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus
     */
    'status': boolean;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
 */
export interface PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {BannerLocation}
     * @memberof PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
     */
    'bannerLocation': BannerLocation;
    /**
     *
     * @type {string}
     * @memberof PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
     */
    'eventId': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
     */
    'desktopImageUrl': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventId
     */
    'mobileImageUrl': string;
}
/**
 *
 * @export
 * @interface PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime
 */
export interface PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime {
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaEventUncheckedCreateInputTitleOrSubtitleOrGameId
 */
export interface PickPrismaEventUncheckedCreateInputTitleOrSubtitleOrGameId {
    /**
     *
     * @type {string}
     * @memberof PickPrismaEventUncheckedCreateInputTitleOrSubtitleOrGameId
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaEventUncheckedCreateInputTitleOrSubtitleOrGameId
     */
    'subtitle': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaEventUncheckedCreateInputTitleOrSubtitleOrGameId
     */
    'gameId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
 */
export interface PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId {
    /**
     *
     * @type {AccessStatus}
     * @memberof PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
     */
    'status'?: AccessStatus;
    /**
     *
     * @type {string}
     * @memberof PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
     */
    'gameId': string;
    /**
     *
     * @type {LinkType}
     * @memberof PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
     */
    'linkType': LinkType;
    /**
     *
     * @type {string}
     * @memberof PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
     */
    'url': string;
    /**
     *
     * @type {number}
     * @memberof PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId
     */
    'order': number;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaGameUncheckedCreateInputStudioIdOrTitleOrIconUrl
 */
export interface PickPrismaGameUncheckedCreateInputStudioIdOrTitleOrIconUrl {
    /**
     *
     * @type {string}
     * @memberof PickPrismaGameUncheckedCreateInputStudioIdOrTitleOrIconUrl
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaGameUncheckedCreateInputStudioIdOrTitleOrIconUrl
     */
    'studioId': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaGameUncheckedCreateInputStudioIdOrTitleOrIconUrl
     */
    'iconUrl': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId
 */
export interface PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId {
    /**
     *
     * @type {string}
     * @memberof PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId
     */
    'objectId': string;
    /**
     *
     * @type {LeaderboardFactorType}
     * @memberof PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId
     */
    'type': LeaderboardFactorType;
    /**
     *
     * @type {string}
     * @memberof PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId
     */
    'leaderboardId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId
 */
export interface PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId {
    /**
     *
     * @type {number}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId
     */
    'quantity'?: number;
    /**
     *
     * @type {number}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId
     */
    'rewardPlace': number;
    /**
     *
     * @type {string}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId
     */
    'productId': string;
    /**
     *
     * @type {string}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId
     */
    'leaderboardScheduleId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
 */
export interface PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId {
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
     */
    'startTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime}
     * @memberof PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
     */
    'endTime'?: PickPrismaBannerUncheckedCreateInputBannerLocationOrStartTimeOrDesktopImageUrlOrMobileImageUrlOrEventIdStartTime | null;
    /**
     *
     * @type {string}
     * @memberof PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
     */
    'leaderboardId': string;
    /**
     *
     * @type {boolean}
     * @memberof PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
     */
    'scheduleProcessed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId
     */
    'rewardsProcessed'?: boolean;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaProductUncheckedCreateInputTypeOrTitle
 */
export interface PickPrismaProductUncheckedCreateInputTypeOrTitle {
    /**
     *
     * @type {string}
     * @memberof PickPrismaProductUncheckedCreateInputTypeOrTitle
     */
    'title': string;
    /**
     *
     * @type {ProductType}
     * @memberof PickPrismaProductUncheckedCreateInputTypeOrTitle
     */
    'type': ProductType;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaUserRoleNewUncheckedCreateInputRole
 */
export interface PickPrismaUserRoleNewUncheckedCreateInputRole {
    /**
     *
     * @type {UserRoleType}
     * @memberof PickPrismaUserRoleNewUncheckedCreateInputRole
     */
    'role': UserRoleType;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
 */
export interface PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType {
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'iconUrl': string | null;
    /**
     *
     * @type {ProductType}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrCreatedAtOrUpdatedAtOrTitleOrSubTitleOrIconUrlOrType
     */
    'subTitle': string | null;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickProductIdOrTitleOrSubTitleOrIconUrlOrType
 */
export interface PickProductIdOrTitleOrSubTitleOrIconUrlOrType {
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrTitleOrSubTitleOrIconUrlOrType
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrTitleOrSubTitleOrIconUrlOrType
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrTitleOrSubTitleOrIconUrlOrType
     */
    'iconUrl': string | null;
    /**
     *
     * @type {ProductType}
     * @memberof PickProductIdOrTitleOrSubTitleOrIconUrlOrType
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof PickProductIdOrTitleOrSubTitleOrIconUrlOrType
     */
    'subTitle': string | null;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
 */
export interface PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId {
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'gameId': string | null;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'iconUrl': string | null;
    /**
     *
     * @type {ProductType}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'subTitle': string | null;
    /**
     *
     * @type {number}
     * @memberof PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId
     */
    'initialQuantity': number;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickUserIdOrEmailOrUsername
 */
export interface PickUserIdOrEmailOrUsername {
    /**
     *
     * @type {string}
     * @memberof PickUserIdOrEmailOrUsername
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof PickUserIdOrEmailOrUsername
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof PickUserIdOrEmailOrUsername
     */
    'username'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PrizeType: {
    readonly Blitz: "blitz";
    readonly Cash: "cash";
    readonly Custom: "custom";
};
export type PrizeType = typeof PrizeType[keyof typeof PrizeType];
/**
 *
 * @export
 * @interface ProcessGameCodeRequest
 */
export interface ProcessGameCodeRequest {
    /**
     *
     * @type {string}
     * @memberof ProcessGameCodeRequest
     */
    'eventId'?: string;
    /**
     *
     * @type {GameCodeType}
     * @memberof ProcessGameCodeRequest
     */
    'type': GameCodeType;
    /**
     *
     * @type {string}
     * @memberof ProcessGameCodeRequest
     */
    'code': string;
}
/**
 *
 * @export
 * @interface ProcessedDrawSchedule
 */
export interface ProcessedDrawSchedule {
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'endTime': string;
    /**
     *
     * @type {boolean}
     * @memberof ProcessedDrawSchedule
     */
    'recurring': boolean;
    /**
     *
     * @type {string}
     * @memberof ProcessedDrawSchedule
     */
    'drawId': string;
    /**
     *
     * @type {boolean}
     * @memberof ProcessedDrawSchedule
     */
    'processed': boolean;
    /**
     *
     * @type {Draw}
     * @memberof ProcessedDrawSchedule
     */
    'draw'?: Draw | null;
    /**
     *
     * @type {Array<UserDrawDetailed>}
     * @memberof ProcessedDrawSchedule
     */
    'userDraws': Array<UserDrawDetailed>;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'updatedAt': string;
    /**
     *
     * @type {ProductType}
     * @memberof Product
     */
    'type': ProductType;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'subTitle': string | null;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'description': string | null;
    /**
     *
     * @type {number}
     * @memberof Product
     */
    'initialQuantity': number;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'iconUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'gameId': string | null;
    /**
     *
     * @type {RaffleNew}
     * @memberof Product
     */
    'raffleNew'?: RaffleNew | null;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof Product
     */
    'buyTransactions'?: Array<Transaction>;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof Product
     */
    'sellTransactions'?: Array<Transaction>;
    /**
     *
     * @type {Array<GoalProduct>}
     * @memberof Product
     */
    'goalProducts'?: Array<GoalProduct>;
    /**
     *
     * @type {Array<UserInventory>}
     * @memberof Product
     */
    'userInventory'?: Array<UserInventory>;
    /**
     *
     * @type {Array<Draw>}
     * @memberof Product
     */
    'ticketDraws'?: Array<Draw>;
    /**
     *
     * @type {Array<Draw>}
     * @memberof Product
     */
    'expiredTicketDraws'?: Array<Draw>;
    /**
     *
     * @type {Array<DrawProduct>}
     * @memberof Product
     */
    'drawProducts'?: Array<DrawProduct>;
    /**
     *
     * @type {Array<LeaderboardReward>}
     * @memberof Product
     */
    'leaderboardRewards'?: Array<LeaderboardReward>;
    /**
     *
     * @type {Array<RewardNew>}
     * @memberof Product
     */
    'rewards'?: Array<RewardNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof Product
     */
    'buyTransactionsNew'?: Array<TransactionNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof Product
     */
    'sellTransactionsNew'?: Array<TransactionNew>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ProductType: {
    readonly Ticket: "TICKET";
    readonly ExpiredTicket: "EXPIRED_TICKET";
    readonly CryptoEthereum: "CRYPTO_ETHEREUM";
    readonly CryptoUsdc: "CRYPTO_USDC";
    readonly Usd: "USD";
    readonly Nft: "NFT";
    readonly InGameItem: "IN_GAME_ITEM";
    readonly PhysicalProduct: "PHYSICAL_PRODUCT";
    readonly Token: "TOKEN";
    readonly GiftCard: "GIFT_CARD";
    readonly Avatar: "AVATAR";
    readonly Banner: "BANNER";
    readonly Other: "OTHER";
};
export type ProductType = typeof ProductType[keyof typeof ProductType];
/**
 *
 * @export
 * @interface Progress
 */
export interface Progress {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'userId': string;
    /**
     *
     * @type {number}
     * @memberof Progress
     */
    'progress': number;
    /**
     *
     * @type {boolean}
     * @memberof Progress
     */
    'complete': boolean;
    /**
     *
     * @type {boolean}
     * @memberof Progress
     */
    'isPendingVerification': boolean;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'goalId': string;
    /**
     *
     * @type {string}
     * @memberof Progress
     */
    'questScheduleId': string;
    /**
     *
     * @type {QuestSchedule}
     * @memberof Progress
     */
    'questSchedule'?: QuestSchedule;
}
/**
 *
 * @export
 * @interface ProgressNew
 */
export interface ProgressNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'achievedAt': string;
    /**
     *
     * @type {number}
     * @memberof ProgressNew
     */
    'progress': number;
    /**
     *
     * @type {boolean}
     * @memberof ProgressNew
     */
    'complete': boolean;
    /**
     *
     * @type {ScheduleType}
     * @memberof ProgressNew
     */
    'type': ScheduleType;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'objectId': string;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof ProgressNew
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof ProgressNew
     */
    'scheduleHistoryId': string;
    /**
     *
     * @type {ScheduleHistoryNew}
     * @memberof ProgressNew
     */
    'scheduleHistoryNew'?: ScheduleHistoryNew;
}
/**
 *
 * @export
 * @interface Quest
 */
export interface Quest {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'description': string | null;
    /**
     *
     * @type {QuestType}
     * @memberof Quest
     */
    'type': QuestType;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'gameId': string;
    /**
     *
     * @type {Game}
     * @memberof Quest
     */
    'game'?: Game;
    /**
     *
     * @type {string}
     * @memberof Quest
     */
    'eventId': string;
    /**
     *
     * @type {Event}
     * @memberof Quest
     */
    'event'?: Event;
    /**
     *
     * @type {Array<Goal>}
     * @memberof Quest
     */
    'goals'?: Array<Goal>;
    /**
     *
     * @type {Array<QuestSchedule>}
     * @memberof Quest
     */
    'schedules'?: Array<QuestSchedule>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const QuestDifficulty: {
    readonly Easy: "EASY";
    readonly Medium: "MEDIUM";
    readonly Hard: "HARD";
};
export type QuestDifficulty = typeof QuestDifficulty[keyof typeof QuestDifficulty];
/**
 *
 * @export
 * @interface QuestGoal
 */
export interface QuestGoal {
    /**
     *
     * @type {number}
     * @memberof QuestGoal
     */
    'completedQuests': number;
    /**
     *
     * @type {Array<GoalWithProgress>}
     * @memberof QuestGoal
     */
    'goals': Array<GoalWithProgress>;
    /**
     *
     * @type {boolean}
     * @memberof QuestGoal
     */
    'processed': boolean;
    /**
     *
     * @type {string}
     * @memberof QuestGoal
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof QuestGoal
     */
    'questId': string;
    /**
     *
     * @type {string}
     * @memberof QuestGoal
     */
    'endTime': string | null;
    /**
     *
     * @type {string}
     * @memberof QuestGoal
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof QuestGoal
     */
    'questScheduleId': string;
}
/**
 *
 * @export
 * @interface QuestNew
 */
export interface QuestNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'description': string | null;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'instructions': string | null;
    /**
     *
     * @type {QuestType}
     * @memberof QuestNew
     */
    'type': QuestType;
    /**
     *
     * @type {ActivityType}
     * @memberof QuestNew
     */
    'activityType': ActivityType;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'openUrl': string | null;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'bannerUrl': string | null;
    /**
     *
     * @type {number}
     * @memberof QuestNew
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'mappingId': string | null;
    /**
     *
     * @type {string}
     * @memberof QuestNew
     */
    'questSetId': string;
    /**
     *
     * @type {QuestSet}
     * @memberof QuestNew
     */
    'questSet'?: QuestSet;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const QuestOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly Vertical: "VERTICAL";
};
export type QuestOrientation = typeof QuestOrientation[keyof typeof QuestOrientation];
/**
 *
 * @export
 * @interface QuestSchedule
 */
export interface QuestSchedule {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'endTime': string | null;
    /**
     *
     * @type {boolean}
     * @memberof QuestSchedule
     */
    'recurring': boolean;
    /**
     *
     * @type {boolean}
     * @memberof QuestSchedule
     */
    'processed': boolean;
    /**
     *
     * @type {string}
     * @memberof QuestSchedule
     */
    'questId': string;
    /**
     *
     * @type {Quest}
     * @memberof QuestSchedule
     */
    'quest'?: Quest;
    /**
     *
     * @type {Array<Progress>}
     * @memberof QuestSchedule
     */
    'progress'?: Array<Progress>;
}
/**
 *
 * @export
 * @interface QuestSet
 */
export interface QuestSet {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof QuestSet
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof QuestSet
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestSet
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof QuestSet
     */
    'eventId': string;
    /**
     *
     * @type {EventNew}
     * @memberof QuestSet
     */
    'event'?: EventNew;
    /**
     *
     * @type {Array<QuestNew>}
     * @memberof QuestSet
     */
    'quests'?: Array<QuestNew>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const QuestType: {
    readonly DailyIndividual: "DAILY_INDIVIDUAL";
    readonly SocialIndividual: "SOCIAL_INDIVIDUAL";
};
export type QuestType = typeof QuestType[keyof typeof QuestType];
/**
 *
 * @export
 * @interface RaffleNew
 */
export interface RaffleNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'title': string | null;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'expiredTicketId': string | null;
    /**
     *
     * @type {PrizeType}
     * @memberof RaffleNew
     */
    'rewardDistributionMethod': PrizeType;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'ticketId': string;
    /**
     *
     * @type {Product}
     * @memberof RaffleNew
     */
    'ticket'?: Product;
    /**
     *
     * @type {string}
     * @memberof RaffleNew
     */
    'eventId': string | null;
    /**
     *
     * @type {EventNew}
     * @memberof RaffleNew
     */
    'event'?: EventNew | null;
}
/**
 *
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'avatar'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'externalId'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'gameId'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof RegisterRequest
     */
    'authId': string;
}
/**
 *
 * @export
 * @interface RewardCreateInput
 */
export interface RewardCreateInput {
    /**
     *
     * @type {number}
     * @memberof RewardCreateInput
     */
    'quantity': number;
    /**
     *
     * @type {string}
     * @memberof RewardCreateInput
     */
    'productId': string;
}
/**
 *
 * @export
 * @interface RewardNew
 */
export interface RewardNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof RewardNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof RewardNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof RewardNew
     */
    'updatedAt': string;
    /**
     *
     * @type {number}
     * @memberof RewardNew
     */
    'quantity': number;
    /**
     *
     * @type {ScheduleType}
     * @memberof RewardNew
     */
    'type': ScheduleType;
    /**
     *
     * @type {string}
     * @memberof RewardNew
     */
    'objectId': string;
    /**
     *
     * @type {number}
     * @memberof RewardNew
     */
    'rewardPlace': number | null;
    /**
     *
     * @type {string}
     * @memberof RewardNew
     */
    'productId': string;
    /**
     *
     * @type {Product}
     * @memberof RewardNew
     */
    'product'?: Product;
}
/**
 *
 * @export
 * @interface SaveEventDetailsArgs
 */
export interface SaveEventDetailsArgs {
    [key: string]: any;
    /**
     *
     * @type {CreateEventArgs}
     * @memberof SaveEventDetailsArgs
     */
    'eventData': CreateEventArgs;
    /**
     *
     * @type {CreateLeaderboardArgs}
     * @memberof SaveEventDetailsArgs
     */
    'leaderboardData'?: CreateLeaderboardArgs;
    /**
     *
     * @type {CreateLeaderboardRewardArgs}
     * @memberof SaveEventDetailsArgs
     */
    'leaderboardRewardData'?: CreateLeaderboardRewardArgs;
    /**
     *
     * @type {CreateRaffleArgsBaseRaffleRewardsArgs}
     * @memberof SaveEventDetailsArgs
     */
    'raffleData'?: CreateRaffleArgsBaseRaffleRewardsArgs;
    /**
     *
     * @type {CreateGameQuestArgs}
     * @memberof SaveEventDetailsArgs
     */
    'gameQuestData'?: CreateGameQuestArgs;
    /**
     *
     * @type {CreateSocialQuestArgs}
     * @memberof SaveEventDetailsArgs
     */
    'socialQuestData'?: CreateSocialQuestArgs;
}
/**
 *
 * @export
 * @interface SaveLeaderboardArgs
 */
export interface SaveLeaderboardArgs {
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof SaveLeaderboardArgs
     */
    'leaderboardDisplay'?: LeaderboardDisplay;
    /**
     *
     * @type {string}
     * @memberof SaveLeaderboardArgs
     */
    'gameId'?: string;
    /**
     *
     * @type {string}
     * @memberof SaveLeaderboardArgs
     */
    'eventId'?: string;
    /**
     *
     * @type {string}
     * @memberof SaveLeaderboardArgs
     */
    'scoreTextAlias'?: string;
    /**
     *
     * @type {string}
     * @memberof SaveLeaderboardArgs
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof SaveLeaderboardArgs
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ScheduleExceptionNew
 */
export interface ScheduleExceptionNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'endTime': string;
    /**
     *
     * @type {boolean}
     * @memberof ScheduleExceptionNew
     */
    'isDeleted': boolean;
    /**
     *
     * @type {string}
     * @memberof ScheduleExceptionNew
     */
    'scheduleId': string;
    /**
     *
     * @type {ScheduleNew}
     * @memberof ScheduleExceptionNew
     */
    'schedule'?: ScheduleNew;
}
/**
 *
 * @export
 * @interface ScheduleHistoryNew
 */
export interface ScheduleHistoryNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'endTime': string;
    /**
     *
     * @type {ScheduleType}
     * @memberof ScheduleHistoryNew
     */
    'type': ScheduleType;
    /**
     *
     * @type {ScheduleStatus}
     * @memberof ScheduleHistoryNew
     */
    'status': ScheduleStatus;
    /**
     *
     * @type {Array<ProgressNew>}
     * @memberof ScheduleHistoryNew
     */
    'progressNew'?: Array<ProgressNew>;
    /**
     *
     * @type {string}
     * @memberof ScheduleHistoryNew
     */
    'scheduleId': string;
    /**
     *
     * @type {ScheduleNew}
     * @memberof ScheduleHistoryNew
     */
    'schedule'?: ScheduleNew;
}
/**
 *
 * @export
 * @interface ScheduleNew
 */
export interface ScheduleNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'startTime': string;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'endTime': string | null;
    /**
     *
     * @type {ScheduleType}
     * @memberof ScheduleNew
     */
    'type': ScheduleType;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'objectId': string;
    /**
     *
     * @type {Frequency}
     * @memberof ScheduleNew
     */
    'frequency': Frequency;
    /**
     *
     * @type {number}
     * @memberof ScheduleNew
     */
    'interval': number;
    /**
     *
     * @type {string}
     * @memberof ScheduleNew
     */
    'daysOfWeek': string | null;
    /**
     *
     * @type {number}
     * @memberof ScheduleNew
     */
    'dayOfMonth': number | null;
    /**
     *
     * @type {number}
     * @memberof ScheduleNew
     */
    'weekOfMonth': number | null;
    /**
     *
     * @type {number}
     * @memberof ScheduleNew
     */
    'endAfterOccurrences': number | null;
    /**
     *
     * @type {Array<ScheduleHistoryNew>}
     * @memberof ScheduleNew
     */
    'scheduleHistory'?: Array<ScheduleHistoryNew>;
    /**
     *
     * @type {Array<ScheduleExceptionNew>}
     * @memberof ScheduleNew
     */
    'scheduleExceptions'?: Array<ScheduleExceptionNew>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ScheduleStatus: {
    readonly NotProcessed: "NOT_PROCESSED";
    readonly Error: "ERROR";
    readonly Processed: "PROCESSED";
};
export type ScheduleStatus = typeof ScheduleStatus[keyof typeof ScheduleStatus];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ScheduleType: {
    readonly Event: "EVENT";
    readonly Leaderboard: "LEADERBOARD";
    readonly Raffle: "RAFFLE";
    readonly Quest: "QUEST";
    readonly GameQuestTemplate: "GAME_QUEST_TEMPLATE";
};
export type ScheduleType = typeof ScheduleType[keyof typeof ScheduleType];
/**
 *
 * @export
 * @interface SocialGoalCreateInput
 */
export interface SocialGoalCreateInput {
    /**
     *
     * @type {string}
     * @memberof SocialGoalCreateInput
     */
    'objectId'?: string;
    /**
     *
     * @type {string}
     * @memberof SocialGoalCreateInput
     */
    'bannerUrl'?: string;
    /**
     *
     * @type {ActivityType}
     * @memberof SocialGoalCreateInput
     */
    'activity': ActivityType;
    /**
     *
     * @type {string}
     * @memberof SocialGoalCreateInput
     */
    'questId': string;
    /**
     *
     * @type {string}
     * @memberof SocialGoalCreateInput
     */
    'openUrl': string;
    /**
     *
     * @type {number}
     * @memberof SocialGoalCreateInput
     */
    'target': number;
    /**
     *
     * @type {string}
     * @memberof SocialGoalCreateInput
     */
    'title': string;
}
/**
 *
 * @export
 * @interface SocialLink
 */
export interface SocialLink {
    /**
     *
     * @type {LinkType}
     * @memberof SocialLink
     */
    'linkType': LinkType;
    /**
     *
     * @type {string}
     * @memberof SocialLink
     */
    'icon': string | null;
    /**
     *
     * @type {string}
     * @memberof SocialLink
     */
    'link': string;
    /**
     *
     * @type {string}
     * @memberof SocialLink
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SocialLink
     */
    'id': string;
}
/**
 *
 * @export
 * @interface SocialQuestCreateInput
 */
export interface SocialQuestCreateInput {
    /**
     *
     * @type {Array<RewardCreateInput>}
     * @memberof SocialQuestCreateInput
     */
    'rewards': Array<RewardCreateInput>;
    /**
     *
     * @type {SocialGoalCreateInput}
     * @memberof SocialQuestCreateInput
     */
    'goal': SocialGoalCreateInput;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const StatusType: {
    readonly NotClaimed: "NOT_CLAIMED";
    readonly Claimed: "CLAIMED";
    readonly Processing: "PROCESSING";
    readonly Delivered: "DELIVERED";
    readonly Expired: "EXPIRED";
};
export type StatusType = typeof StatusType[keyof typeof StatusType];
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'updatedAt': string;
    /**
     *
     * @type {TransactionType}
     * @memberof Transaction
     */
    'transactionType': TransactionType;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'buyProductId': string;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    'buyProductQuantity': number;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'sellProductId': string | null;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    'sellProductQuantity': number | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'objectId': string | null;
    /**
     *
     * @type {StatusType}
     * @memberof Transaction
     */
    'status': StatusType;
    /**
     *
     * @type {User}
     * @memberof Transaction
     */
    'user'?: User | null;
    /**
     *
     * @type {Product}
     * @memberof Transaction
     */
    'sellProduct'?: Product | null;
    /**
     *
     * @type {Product}
     * @memberof Transaction
     */
    'buyProduct'?: Product | null;
}
/**
 *
 * @export
 * @interface TransactionDetailed
 */
export interface TransactionDetailed {
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {TransactionType}
     * @memberof TransactionDetailed
     */
    'transactionType': TransactionType;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'buyProductId': string;
    /**
     *
     * @type {number}
     * @memberof TransactionDetailed
     */
    'buyProductQuantity': number;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'sellProductId': string | null;
    /**
     *
     * @type {number}
     * @memberof TransactionDetailed
     */
    'sellProductQuantity': number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionDetailed
     */
    'objectId': string | null;
    /**
     *
     * @type {StatusType}
     * @memberof TransactionDetailed
     */
    'status': StatusType;
    /**
     *
     * @type {User}
     * @memberof TransactionDetailed
     */
    'user'?: User | null;
    /**
     *
     * @type {Product}
     * @memberof TransactionDetailed
     */
    'sellProduct': Product | null;
    /**
     *
     * @type {Product}
     * @memberof TransactionDetailed
     */
    'buyProduct': Product | null;
}
/**
 *
 * @export
 * @interface TransactionNew
 */
export interface TransactionNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'updatedAt': string;
    /**
     *
     * @type {TransactionType}
     * @memberof TransactionNew
     */
    'transactionType': TransactionType;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'buyerUserId': string;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'boughtProductId': string;
    /**
     *
     * @type {number}
     * @memberof TransactionNew
     */
    'boughtProductQuantity': number;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'sellerUserId': string;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'soldProductId': string | null;
    /**
     *
     * @type {number}
     * @memberof TransactionNew
     */
    'soldProductQuantity': number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionNew
     */
    'objectId': string | null;
    /**
     *
     * @type {StatusType}
     * @memberof TransactionNew
     */
    'status': StatusType;
    /**
     *
     * @type {User}
     * @memberof TransactionNew
     */
    'buyer'?: User | null;
    /**
     *
     * @type {User}
     * @memberof TransactionNew
     */
    'seller'?: User | null;
    /**
     *
     * @type {Product}
     * @memberof TransactionNew
     */
    'soldProduct'?: Product | null;
    /**
     *
     * @type {Product}
     * @memberof TransactionNew
     */
    'boughtProduct'?: Product | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const TransactionType: {
    readonly QuestReward: "QUEST_REWARD";
    readonly LeaderboardReward: "LEADERBOARD_REWARD";
    readonly RaffleReward: "RAFFLE_REWARD";
    readonly Reward: "REWARD";
    readonly Marketplace: "MARKETPLACE";
    readonly Draw: "DRAW";
    readonly ExpiredRaffleTicket: "EXPIRED_RAFFLE_TICKET";
};
export type TransactionType = typeof TransactionType[keyof typeof TransactionType];
/**
 *
 * @export
 * @interface UpdateApiKeyArgs
 */
export interface UpdateApiKeyArgs {
    /**
     *
     * @type {AccessStatus}
     * @memberof UpdateApiKeyArgs
     */
    'status': AccessStatus;
    /**
     *
     * @type {string}
     * @memberof UpdateApiKeyArgs
     */
    'expireAt': string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateApiKeyArgs
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof UpdateApiKeyArgs
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateGameLinksBulkArgs
 */
export interface UpdateGameLinksBulkArgs {
    /**
     *
     * @type {string}
     * @memberof UpdateGameLinksBulkArgs
     */
    'gameId': string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateGameLinksBulkArgs
     */
    'isNew'?: boolean;
    /**
     *
     * @type {AccessStatus}
     * @memberof UpdateGameLinksBulkArgs
     */
    'status': AccessStatus;
    /**
     *
     * @type {number}
     * @memberof UpdateGameLinksBulkArgs
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof UpdateGameLinksBulkArgs
     */
    'url': string;
    /**
     *
     * @type {LinkType}
     * @memberof UpdateGameLinksBulkArgs
     */
    'linkType': LinkType;
    /**
     *
     * @type {string}
     * @memberof UpdateGameLinksBulkArgs
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UpdateLeaderboardResponse
 */
export interface UpdateLeaderboardResponse {
    /**
     *
     * @type {LeaderboardDisplay}
     * @memberof UpdateLeaderboardResponse
     */
    'leaderboardDisplay'?: LeaderboardDisplay | null;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'gameId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'eventId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'scoreTextAlias'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateLeaderboardResponse
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface UpdateNotificationsRequest
 */
export interface UpdateNotificationsRequest {
    /**
     *
     * @type {boolean}
     * @memberof UpdateNotificationsRequest
     */
    'seen': boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateNotificationsRequest
     */
    'notificationIds': Array<string>;
}
/**
 *
 * @export
 * @interface UpdateProfileRequest
 */
export interface UpdateProfileRequest {
    /**
     *
     * @type {boolean}
     * @memberof UpdateProfileRequest
     */
    'default'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateProfileRequest
     */
    'inventoryId': string;
    /**
     *
     * @type {ProductType}
     * @memberof UpdateProfileRequest
     */
    'productType': ProductType;
}
/**
 *
 * @export
 * @interface UpdateRequest
 */
export interface UpdateRequest {
    /**
     *
     * @type {boolean}
     * @memberof UpdateRequest
     */
    'enableNotifications'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateRequest
     */
    'hasAcceptedAge'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateRequest
     */
    'hasAcceptedLegal'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateRequest
     */
    'hasOnboarded'?: boolean;
    /**
     *
     * @type {Gender}
     * @memberof UpdateRequest
     */
    'gender'?: Gender | null;
    /**
     *
     * @type {number}
     * @memberof UpdateRequest
     */
    'birthYear'?: number | null;
    /**
     *
     * @type {string}
     * @memberof UpdateRequest
     */
    'mergedWith'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateRequest
     */
    'externalId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateRequest
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateRequest
     */
    'avatarProductId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateRequest
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface UpdateUserWalletRequest
 */
export interface UpdateUserWalletRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateUserWalletRequest
     */
    'userId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateUserWalletRequest
     */
    'isPrimary': boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateUserWalletRequest
     */
    'id': string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'originalCreationDate': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'authId': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'phoneNumber': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'name': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    'usertag': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'code': string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    'remainingReferrals': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'avatarUrl': string | null;
    /**
     *
     * @type {number}
     * @memberof User
     */
    'birthYear': number;
    /**
     *
     * @type {Gender}
     * @memberof User
     */
    'gender': Gender;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'hasOnboarded': boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'hasAcceptedLegal': boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'hasAcceptedAge': boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'enableNotifications': boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'referredById': string | null;
    /**
     *
     * @type {User}
     * @memberof User
     */
    'referredBy'?: User | null;
    /**
     *
     * @type {Array<User>}
     * @memberof User
     */
    'referredUsers'?: Array<User>;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'mergedWith': string | null;
    /**
     *
     * @type {User}
     * @memberof User
     */
    'mergedWithUser'?: User | null;
    /**
     *
     * @type {Array<User>}
     * @memberof User
     */
    'externalUsers'?: Array<User>;
    /**
     *
     * @type {Blacklist}
     * @memberof User
     */
    'blacklist'?: Blacklist | null;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof User
     */
    'transactions'?: Array<Transaction>;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof User
     */
    'userDraws'?: Array<UserDraw>;
    /**
     *
     * @type {Array<LeaderboardScore>}
     * @memberof User
     */
    'leaderboardScores'?: Array<LeaderboardScore>;
    /**
     *
     * @type {Array<LeaderboardResult>}
     * @memberof User
     */
    'leaderboardResult'?: Array<LeaderboardResult>;
    /**
     *
     * @type {Array<Notification>}
     * @memberof User
     */
    'notifications'?: Array<Notification>;
    /**
     *
     * @type {Array<UserInventory>}
     * @memberof User
     */
    'userInventory'?: Array<UserInventory>;
    /**
     *
     * @type {Array<Activity>}
     * @memberof User
     */
    'activity'?: Array<Activity>;
    /**
     *
     * @type {Array<UserConnection>}
     * @memberof User
     */
    'userConnections'?: Array<UserConnection>;
    /**
     *
     * @type {Array<UserWallet>}
     * @memberof User
     */
    'userWallets'?: Array<UserWallet>;
    /**
     *
     * @type {Array<UserInstalledGames>}
     * @memberof User
     */
    'userInstalledGames'?: Array<UserInstalledGames>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof User
     */
    'gameCode'?: Array<GameCode>;
    /**
     *
     * @type {Array<BlacklistHistory>}
     * @memberof User
     */
    'blacklistHistory'?: Array<BlacklistHistory>;
    /**
     *
     * @type {Array<UserRoleNew>}
     * @memberof User
     */
    'userRoles'?: Array<UserRoleNew>;
    /**
     *
     * @type {Array<ProgressNew>}
     * @memberof User
     */
    'progressNew'?: Array<ProgressNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof User
     */
    'buyTransactions'?: Array<TransactionNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof User
     */
    'sellTransactions'?: Array<TransactionNew>;
    /**
     *
     * @type {Array<Participant>}
     * @memberof User
     */
    'joinedEvents'?: Array<Participant>;
    /**
     *
     * @type {Array<ParticipantNew>}
     * @memberof User
     */
    'joinedEventsNew'?: Array<ParticipantNew>;
    /**
     *
     * @type {Array<EventNew>}
     * @memberof User
     */
    'eventNew'?: Array<EventNew>;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'externalId': string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'gameId': string | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'verified': boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'lastLogin': string | null;
}
/**
 *
 * @export
 * @interface UserConnection
 */
export interface UserConnection {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'email': string | null;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'nickname': string | null;
    /**
     *
     * @type {ConnectionType}
     * @memberof UserConnection
     */
    'socialConnectionType': ConnectionType;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'sub': string | null;
    /**
     *
     * @type {string}
     * @memberof UserConnection
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof UserConnection
     */
    'user'?: User;
}
/**
 *
 * @export
 * @interface UserDetailed
 */
export interface UserDetailed {
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'originalCreationDate': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'authId': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'email': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'phoneNumber': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'name': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'username': string;
    /**
     *
     * @type {number}
     * @memberof UserDetailed
     */
    'usertag': number;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'code': string;
    /**
     *
     * @type {number}
     * @memberof UserDetailed
     */
    'remainingReferrals': number;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'avatarUrl': string | null;
    /**
     *
     * @type {number}
     * @memberof UserDetailed
     */
    'birthYear': number;
    /**
     *
     * @type {Gender}
     * @memberof UserDetailed
     */
    'gender': Gender;
    /**
     *
     * @type {boolean}
     * @memberof UserDetailed
     */
    'hasOnboarded': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserDetailed
     */
    'hasAcceptedLegal': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserDetailed
     */
    'hasAcceptedAge': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserDetailed
     */
    'enableNotifications': boolean;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'referredById': string | null;
    /**
     *
     * @type {User}
     * @memberof UserDetailed
     */
    'referredBy'?: User | null;
    /**
     *
     * @type {Array<User>}
     * @memberof UserDetailed
     */
    'referredUsers'?: Array<User>;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'mergedWith': string | null;
    /**
     *
     * @type {User}
     * @memberof UserDetailed
     */
    'mergedWithUser': User | null;
    /**
     *
     * @type {Array<User>}
     * @memberof UserDetailed
     */
    'externalUsers'?: Array<User>;
    /**
     *
     * @type {Blacklist}
     * @memberof UserDetailed
     */
    'blacklist': Blacklist | null;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof UserDetailed
     */
    'transactions'?: Array<Transaction>;
    /**
     *
     * @type {Array<UserDraw>}
     * @memberof UserDetailed
     */
    'userDraws'?: Array<UserDraw>;
    /**
     *
     * @type {Array<LeaderboardScore>}
     * @memberof UserDetailed
     */
    'leaderboardScores'?: Array<LeaderboardScore>;
    /**
     *
     * @type {Array<LeaderboardResult>}
     * @memberof UserDetailed
     */
    'leaderboardResult'?: Array<LeaderboardResult>;
    /**
     *
     * @type {Array<Notification>}
     * @memberof UserDetailed
     */
    'notifications'?: Array<Notification>;
    /**
     *
     * @type {Array<UserInventory>}
     * @memberof UserDetailed
     */
    'userInventory'?: Array<UserInventory>;
    /**
     *
     * @type {Array<Activity>}
     * @memberof UserDetailed
     */
    'activity'?: Array<Activity>;
    /**
     *
     * @type {Array<UserConnection>}
     * @memberof UserDetailed
     */
    'userConnections'?: Array<UserConnection>;
    /**
     *
     * @type {Array<UserWallet>}
     * @memberof UserDetailed
     */
    'userWallets'?: Array<UserWallet>;
    /**
     *
     * @type {Array<UserInstalledGames>}
     * @memberof UserDetailed
     */
    'userInstalledGames'?: Array<UserInstalledGames>;
    /**
     *
     * @type {Array<GameCode>}
     * @memberof UserDetailed
     */
    'gameCode'?: Array<GameCode>;
    /**
     *
     * @type {Array<BlacklistHistory>}
     * @memberof UserDetailed
     */
    'blacklistHistory'?: Array<BlacklistHistory>;
    /**
     *
     * @type {Array<UserRoleNew>}
     * @memberof UserDetailed
     */
    'userRoles'?: Array<UserRoleNew>;
    /**
     *
     * @type {Array<ProgressNew>}
     * @memberof UserDetailed
     */
    'progressNew'?: Array<ProgressNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof UserDetailed
     */
    'buyTransactions'?: Array<TransactionNew>;
    /**
     *
     * @type {Array<TransactionNew>}
     * @memberof UserDetailed
     */
    'sellTransactions'?: Array<TransactionNew>;
    /**
     *
     * @type {Array<Participant>}
     * @memberof UserDetailed
     */
    'joinedEvents'?: Array<Participant>;
    /**
     *
     * @type {Array<ParticipantNew>}
     * @memberof UserDetailed
     */
    'joinedEventsNew'?: Array<ParticipantNew>;
    /**
     *
     * @type {Array<EventNew>}
     * @memberof UserDetailed
     */
    'eventNew'?: Array<EventNew>;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'externalId': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'gameId': string | null;
    /**
     *
     * @type {boolean}
     * @memberof UserDetailed
     */
    'verified': boolean;
    /**
     *
     * @type {string}
     * @memberof UserDetailed
     */
    'lastLogin': string | null;
}
/**
 *
 * @export
 * @interface UserDraw
 */
export interface UserDraw {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'drawScheduleId': string;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'drawProductId': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDraw
     */
    'transactionId': string | null;
    /**
     *
     * @type {UserDrawStatus}
     * @memberof UserDraw
     */
    'status': UserDrawStatus;
    /**
     *
     * @type {User}
     * @memberof UserDraw
     */
    'user'?: User | null;
    /**
     *
     * @type {DrawSchedule}
     * @memberof UserDraw
     */
    'drawSchedule'?: DrawSchedule | null;
    /**
     *
     * @type {DrawProduct}
     * @memberof UserDraw
     */
    'drawProduct'?: DrawProduct | null;
}
/**
 *
 * @export
 * @interface UserDrawDetailed
 */
export interface UserDrawDetailed {
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'drawScheduleId': string;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'drawProductId': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDrawDetailed
     */
    'transactionId': string | null;
    /**
     *
     * @type {UserDrawStatus}
     * @memberof UserDrawDetailed
     */
    'status': UserDrawStatus;
    /**
     *
     * @type {User}
     * @memberof UserDrawDetailed
     */
    'user': User | null;
    /**
     *
     * @type {DrawSchedule}
     * @memberof UserDrawDetailed
     */
    'drawSchedule'?: DrawSchedule | null;
    /**
     *
     * @type {DrawProductDetailed}
     * @memberof UserDrawDetailed
     */
    'drawProduct': DrawProductDetailed | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserDrawStatus: {
    readonly Claimed: "CLAIMED";
    readonly NotClaimed: "NOT_CLAIMED";
    readonly Expired: "EXPIRED";
};
export type UserDrawStatus = typeof UserDrawStatus[keyof typeof UserDrawStatus];
/**
 *
 * @export
 * @interface UserInstalledGames
 */
export interface UserInstalledGames {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'firstInstalledTime': string;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'applicationId': string;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof UserInstalledGames
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof UserInstalledGames
     */
    'gameId': string | null;
    /**
     *
     * @type {Game}
     * @memberof UserInstalledGames
     */
    'game'?: Game | null;
}
/**
 *
 * @export
 * @interface UserInventory
 */
export interface UserInventory {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserInventory
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserInventory
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInventory
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInventory
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof UserInventory
     */
    'productId': string;
    /**
     *
     * @type {number}
     * @memberof UserInventory
     */
    'qty': number;
    /**
     *
     * @type {boolean}
     * @memberof UserInventory
     */
    'seen': boolean;
    /**
     *
     * @type {User}
     * @memberof UserInventory
     */
    'user'?: User | null;
    /**
     *
     * @type {Product}
     * @memberof UserInventory
     */
    'product'?: Product | null;
    /**
     *
     * @type {boolean}
     * @memberof UserInventory
     */
    'default': boolean;
}
/**
 *
 * @export
 * @interface UserInventoryDetailed
 */
export interface UserInventoryDetailed {
    /**
     *
     * @type {string}
     * @memberof UserInventoryDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserInventoryDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInventoryDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserInventoryDetailed
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof UserInventoryDetailed
     */
    'productId': string;
    /**
     *
     * @type {number}
     * @memberof UserInventoryDetailed
     */
    'qty': number;
    /**
     *
     * @type {boolean}
     * @memberof UserInventoryDetailed
     */
    'seen': boolean;
    /**
     *
     * @type {User}
     * @memberof UserInventoryDetailed
     */
    'user': User | null;
    /**
     *
     * @type {Product}
     * @memberof UserInventoryDetailed
     */
    'product': Product | null;
    /**
     *
     * @type {boolean}
     * @memberof UserInventoryDetailed
     */
    'default': boolean;
}
/**
 *
 * @export
 * @interface UserRoleNew
 */
export interface UserRoleNew {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserRoleNew
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserRoleNew
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserRoleNew
     */
    'updatedAt': string;
    /**
     *
     * @type {UserRoleType}
     * @memberof UserRoleNew
     */
    'role': UserRoleType;
    /**
     *
     * @type {string}
     * @memberof UserRoleNew
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof UserRoleNew
     */
    'user'?: User;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserRoleType: {
    readonly Creator: "CREATOR";
    readonly Verified: "VERIFIED";
    readonly LedgeAdmin: "LEDGE_ADMIN";
};
export type UserRoleType = typeof UserRoleType[keyof typeof UserRoleType];
/**
 *
 * @export
 * @interface UserSpinDetailed
 */
export interface UserSpinDetailed {
    /**
     *
     * @type {string}
     * @memberof UserSpinDetailed
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserSpinDetailed
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserSpinDetailed
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserSpinDetailed
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof UserSpinDetailed
     */
    'productId': string;
    /**
     *
     * @type {number}
     * @memberof UserSpinDetailed
     */
    'qty': number;
    /**
     *
     * @type {boolean}
     * @memberof UserSpinDetailed
     */
    'seen': boolean;
    /**
     *
     * @type {User}
     * @memberof UserSpinDetailed
     */
    'user'?: User | null;
    /**
     *
     * @type {Product}
     * @memberof UserSpinDetailed
     */
    'product': Product | null;
    /**
     *
     * @type {boolean}
     * @memberof UserSpinDetailed
     */
    'default': boolean;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof UserSpinDetailed
     */
    'transactions': Array<Transaction> | null;
    /**
     *
     * @type {Game}
     * @memberof UserSpinDetailed
     */
    'game': Game | null;
}
/**
 *
 * @export
 * @interface UserWallet
 */
export interface UserWallet {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'address': string;
    /**
     *
     * @type {boolean}
     * @memberof UserWallet
     */
    'primary': boolean;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'connectorType': string | null;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'walletClientType': string | null;
    /**
     *
     * @type {WalletType}
     * @memberof UserWallet
     */
    'walletType': WalletType;
    /**
     *
     * @type {string}
     * @memberof UserWallet
     */
    'userId': string;
    /**
     *
     * @type {User}
     * @memberof UserWallet
     */
    'user'?: User;
}
/**
 *
 * @export
 * @interface ValidateLinkingCode200Response
 */
export interface ValidateLinkingCode200Response {
    /**
     *
     * @type {string}
     * @memberof ValidateLinkingCode200Response
     */
    'message'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ValidateLinkingCode200Response
     */
    'isValid': boolean;
    /**
     *
     * @type {GameCodeDetailed}
     * @memberof ValidateLinkingCode200Response
     */
    'gameCode': GameCodeDetailed | null;
    /**
     *
     * @type {User}
     * @memberof ValidateLinkingCode200Response
     */
    'externalUser': User | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const WalletType: {
    readonly Ethereum: "ETHEREUM";
    readonly Solana: "SOLANA";
};
export type WalletType = typeof WalletType[keyof typeof WalletType];
/**
 * AdminAnnouncementApi - axios parameter creator
 * @export
 */
export declare const AdminAnnouncementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAnnouncement: (body: PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAnnouncement: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAnnouncements: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} announcementId
     * @param {PartialCreateAnnouncementArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAnnouncement: (announcementId: string, body: PartialCreateAnnouncementArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminAnnouncementApi - functional programming interface
 * @export
 */
export declare const AdminAnnouncementApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAnnouncement(body: PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAnnouncement(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAnnouncements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Announcement>>>;
    /**
     *
     * @param {string} announcementId
     * @param {PartialCreateAnnouncementArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAnnouncement(announcementId: string, body: PartialCreateAnnouncementArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>>;
};
/**
 * AdminAnnouncementApi - factory interface
 * @export
 */
export declare const AdminAnnouncementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAnnouncement(body: PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus, options?: RawAxiosRequestConfig): AxiosPromise<Announcement>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAnnouncement(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAnnouncements(options?: RawAxiosRequestConfig): AxiosPromise<Array<Announcement>>;
    /**
     *
     * @param {string} announcementId
     * @param {PartialCreateAnnouncementArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAnnouncement(announcementId: string, body: PartialCreateAnnouncementArgs, options?: RawAxiosRequestConfig): AxiosPromise<Announcement>;
};
/**
 * AdminAnnouncementApi - object-oriented interface
 * @export
 * @class AdminAnnouncementApi
 * @extends {BaseAPI}
 */
export declare class AdminAnnouncementApi extends BaseAPI {
    /**
     *
     * @param {PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAnnouncementApi
     */
    createAnnouncement(body: PickPrismaAnnouncementUncheckedCreateInputMessageOrStatus, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Announcement, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAnnouncementApi
     */
    deleteAnnouncement(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAnnouncementApi
     */
    getAllAnnouncements(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Announcement[], any>>;
    /**
     *
     * @param {string} announcementId
     * @param {PartialCreateAnnouncementArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAnnouncementApi
     */
    updateAnnouncement(announcementId: string, body: PartialCreateAnnouncementArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Announcement, any>>;
}
/**
 * AdminBannerApi - axios parameter creator
 * @export
 */
export declare const AdminBannerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateBannerArgs} createBannerArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBanner: (createBannerArgs: CreateBannerArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBanner: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBanners: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bannerId
     * @param {PartialCreateBannerArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBanner: (bannerId: string, body: PartialCreateBannerArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id banner id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadBannerImages: (id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminBannerApi - functional programming interface
 * @export
 */
export declare const AdminBannerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateBannerArgs} createBannerArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBanner(createBannerArgs: CreateBannerArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBanner(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBanners(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>>>;
    /**
     *
     * @param {string} bannerId
     * @param {PartialCreateBannerArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBanner(bannerId: string, body: PartialCreateBannerArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id banner id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadBannerImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * AdminBannerApi - factory interface
 * @export
 */
export declare const AdminBannerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateBannerArgs} createBannerArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBanner(createBannerArgs: CreateBannerArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBanner(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBanners(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>>;
    /**
     *
     * @param {string} bannerId
     * @param {PartialCreateBannerArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBanner(bannerId: string, body: PartialCreateBannerArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id banner id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadBannerImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * AdminBannerApi - object-oriented interface
 * @export
 * @class AdminBannerApi
 * @extends {BaseAPI}
 */
export declare class AdminBannerApi extends BaseAPI {
    /**
     *
     * @param {CreateBannerArgs} createBannerArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminBannerApi
     */
    createBanner(createBannerArgs: CreateBannerArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminBannerApi
     */
    deleteBanner(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminBannerApi
     */
    getAllBanners(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt[], any>>;
    /**
     *
     * @param {string} bannerId
     * @param {PartialCreateBannerArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminBannerApi
     */
    updateBanner(bannerId: string, body: PartialCreateBannerArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickBannerOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrBannerLocationOrEventIdOrLogoUrlOrDesktopImageUrlOrMobileImageUrlOrAlt, any>>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id banner id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminBannerApi
     */
    uploadBannerImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * AdminEventApi - axios parameter creator
 * @export
 */
export declare const AdminEventApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvent: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvents: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is for the old system
     * @param {CreateEventArgs} createEventArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent: (createEventArgs: CreateEventArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvent: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is for the old system
     * @param {string} eventId
     * @param {PartialCreateEventArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvent: (eventId: string, body: PartialCreateEventArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id event id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadEventImages: (id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminEventApi - functional programming interface
 * @export
 */
export declare const AdminEventApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventDetailedResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>>>;
    /**
     * This endpoint is for the old system
     * @param {CreateEventArgs} createEventArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(createEventArgs: CreateEventArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>>;
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     * This endpoint is for the old system
     * @param {string} eventId
     * @param {PartialCreateEventArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvent(eventId: string, body: PartialCreateEventArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id event id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadEventImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * AdminEventApi - factory interface
 * @export
 */
export declare const AdminEventApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetEventDetailedResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetEvents(options?: RawAxiosRequestConfig): AxiosPromise<Array<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>>;
    /**
     * This endpoint is for the old system
     * @param {CreateEventArgs} createEventArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvent(createEventArgs: CreateEventArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>;
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     * This endpoint is for the old system
     * @param {string} eventId
     * @param {PartialCreateEventArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvent(eventId: string, body: PartialCreateEventArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id event id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadEventImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * AdminEventApi - object-oriented interface
 * @export
 * @class AdminEventApi
 * @extends {BaseAPI}
 */
export declare class AdminEventApi extends BaseAPI {
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    adminGetEvent(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEventDetailedResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    adminGetEvents(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId[], any>>;
    /**
     * This endpoint is for the old system
     * @param {CreateEventArgs} createEventArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    createEvent(createEventArgs: CreateEventArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId, any>>;
    /**
     * This endpoint is for the old system
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    deleteEvent(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     * This endpoint is for the old system
     * @param {string} eventId
     * @param {PartialCreateEventArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    updateEvent(eventId: string, body: PartialCreateEventArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickEventOrIdOrStartTimeOrEndTimeOrStatusOrTitleOrSubtitleOrDescriptionOrImageUrlOrMapCodeOrYoutubeIdOrVideoUrlOrGameId, any>>;
    /**
     * This endpoint is for the old system Uploads an image to S3 and updates the event\'s image URL in the database.
     * @param {string} id event id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventApi
     */
    uploadEventImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * AdminEventNewApi - axios parameter creator
 * @export
 */
export declare const AdminEventNewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetails: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminEventNewApi - functional programming interface
 * @export
 */
export declare const AdminEventNewApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetails(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventNew>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventNew>>>;
};
/**
 * AdminEventNewApi - factory interface
 * @export
 */
export declare const AdminEventNewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetails(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventNew>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(options?: RawAxiosRequestConfig): AxiosPromise<Array<EventNew>>;
};
/**
 * AdminEventNewApi - object-oriented interface
 * @export
 * @class AdminEventNewApi
 * @extends {BaseAPI}
 */
export declare class AdminEventNewApi extends BaseAPI {
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventNewApi
     */
    getEventDetails(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventNew, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEventNewApi
     */
    listEvents(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventNew[], any>>;
}
/**
 * AdminGameApi - axios parameter creator
 * @export
 */
export declare const AdminGameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Stores newly created external api key for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalApiKey: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateGameArgs} createGameArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGame: (createGameArgs: CreateGameArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the external api keys for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllExternalApiKey: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGames: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing external api key for a game.
     * @param {string} id api key id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKey: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing external api key for a game.
     * @param {Array<UpdateApiKeyArgs>} updateApiKeyArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKeyBulk: (updateApiKeyArgs: Array<UpdateApiKeyArgs>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGame: (id: string, body: PartialCreateGameArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads an image to S3 and updates the game\'s image URL in the database.
     * @param {string} id game id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadGameImages: (id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminGameApi - functional programming interface
 * @export
 */
export declare const AdminGameApiFp: (configuration?: Configuration) => {
    /**
     * Stores newly created external api key for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExternalApiKeyResponse>>;
    /**
     *
     * @param {CreateGameArgs} createGameArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGame(createGameArgs: CreateGameArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGamesResponse>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     * Retrieves the external api keys for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExternalApiKeyResponse>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetGamesResponse>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGameResponseDetailed>>;
    /**
     * Updates an existing external api key for a game.
     * @param {string} id api key id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExternalApiKeyResponse>>;
    /**
     * Updates an existing external api key for a game.
     * @param {Array<UpdateApiKeyArgs>} updateApiKeyArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKeyBulk(updateApiKeyArgs: Array<UpdateApiKeyArgs>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExternalApiKeyResponse>>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGame(id: string, body: PartialCreateGameArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGamesResponse>>;
    /**
     * Uploads an image to S3 and updates the game\'s image URL in the database.
     * @param {string} id game id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadGameImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * AdminGameApi - factory interface
 * @export
 */
export declare const AdminGameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Stores newly created external api key for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalApiKey(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetExternalApiKeyResponse>;
    /**
     *
     * @param {CreateGameArgs} createGameArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGame(createGameArgs: CreateGameArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetGamesResponse>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     * Retrieves the external api keys for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllExternalApiKey(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExternalApiKeyResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGames(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetGamesResponse>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetGameResponseDetailed>;
    /**
     * Updates an existing external api key for a game.
     * @param {string} id api key id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKey(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetExternalApiKeyResponse>;
    /**
     * Updates an existing external api key for a game.
     * @param {Array<UpdateApiKeyArgs>} updateApiKeyArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExternalApiKeyBulk(updateApiKeyArgs: Array<UpdateApiKeyArgs>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExternalApiKeyResponse>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGame(id: string, body: PartialCreateGameArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetGamesResponse>;
    /**
     * Uploads an image to S3 and updates the game\'s image URL in the database.
     * @param {string} id game id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadGameImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * AdminGameApi - object-oriented interface
 * @export
 * @class AdminGameApi
 * @extends {BaseAPI}
 */
export declare class AdminGameApi extends BaseAPI {
    /**
     * Stores newly created external api key for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    createExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExternalApiKeyResponse, any>>;
    /**
     *
     * @param {CreateGameArgs} createGameArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    createGame(createGameArgs: CreateGameArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetGamesResponse, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    deleteGame(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     * Retrieves the external api keys for a game.
     * @param {string} id game id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    getAllExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExternalApiKeyResponse[], any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    getAllGames(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetGamesResponse[], any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    getGameById(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetGameResponseDetailed, any>>;
    /**
     * Updates an existing external api key for a game.
     * @param {string} id api key id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    updateExternalApiKey(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExternalApiKeyResponse, any>>;
    /**
     * Updates an existing external api key for a game.
     * @param {Array<UpdateApiKeyArgs>} updateApiKeyArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    updateExternalApiKeyBulk(updateApiKeyArgs: Array<UpdateApiKeyArgs>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExternalApiKeyResponse[], any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    updateGame(id: string, body: PartialCreateGameArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetGamesResponse, any>>;
    /**
     * Uploads an image to S3 and updates the game\'s image URL in the database.
     * @param {string} id game id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameApi
     */
    uploadGameImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * AdminGameLinkApi - axios parameter creator
 * @export
 */
export declare const AdminGameLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGameLink: (gameId: string, body: PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGameLink: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameLinks: (gameId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameLinkArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLink: (id: string, body: PartialCreateGameLinkArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<UpdateGameLinksBulkArgs>} updateGameLinksBulkArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLinks: (updateGameLinksBulkArgs: Array<UpdateGameLinksBulkArgs>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminGameLinkApi - functional programming interface
 * @export
 */
export declare const AdminGameLinkApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGameLink(gameId: string, body: PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameLinks>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGameLink(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameLinks(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GameLinks>>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameLinkArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLink(id: string, body: PartialCreateGameLinkArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameLinks>>;
    /**
     *
     * @param {Array<UpdateGameLinksBulkArgs>} updateGameLinksBulkArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLinks(updateGameLinksBulkArgs: Array<UpdateGameLinksBulkArgs>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GameLinks>>>;
};
/**
 * AdminGameLinkApi - factory interface
 * @export
 */
export declare const AdminGameLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} gameId
     * @param {PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGameLink(gameId: string, body: PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId, options?: RawAxiosRequestConfig): AxiosPromise<GameLinks>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGameLink(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameLinks(gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GameLinks>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameLinkArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLink(id: string, body: PartialCreateGameLinkArgs, options?: RawAxiosRequestConfig): AxiosPromise<GameLinks>;
    /**
     *
     * @param {Array<UpdateGameLinksBulkArgs>} updateGameLinksBulkArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGameLinks(updateGameLinksBulkArgs: Array<UpdateGameLinksBulkArgs>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GameLinks>>;
};
/**
 * AdminGameLinkApi - object-oriented interface
 * @export
 * @class AdminGameLinkApi
 * @extends {BaseAPI}
 */
export declare class AdminGameLinkApi extends BaseAPI {
    /**
     *
     * @param {string} gameId
     * @param {PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameLinkApi
     */
    createGameLink(gameId: string, body: PickPrismaGameLinksUncheckedCreateInputLinkTypeOrUrlOrOrderOrStatusOrGameId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameLinks, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameLinkApi
     */
    deleteGameLink(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameLinkApi
     */
    getGameLinks(gameId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameLinks[], any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateGameLinkArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameLinkApi
     */
    updateGameLink(id: string, body: PartialCreateGameLinkArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameLinks, any>>;
    /**
     *
     * @param {Array<UpdateGameLinksBulkArgs>} updateGameLinksBulkArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGameLinkApi
     */
    updateGameLinks(updateGameLinksBulkArgs: Array<UpdateGameLinksBulkArgs>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameLinks[], any>>;
}
/**
 * AdminLeaderboardApi - axios parameter creator
 * @export
 */
export declare const AdminLeaderboardApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateLeaderboardArgs} createLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboard: (createLeaderboardArgs: CreateLeaderboardArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboard: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Note: although its possible for an event to have multiple leaderboards, this endpoint will only return the first one found b/c currently we only do events with one leaderboard. That typically means 1 leaderboard schedule starting/ending at the same time as the event itself. Get a leaderboard by event id
     * @param {string} eventId - The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboard: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SaveLeaderboardArgs} saveLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboard: (saveLeaderboardArgs: SaveLeaderboardArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboard: (id: string, body: PartialCreateLeaderboardArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminLeaderboardApi - functional programming interface
 * @export
 */
export declare const AdminLeaderboardApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateLeaderboardArgs} createLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboard(createLeaderboardArgs: CreateLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLeaderboardResponse>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboard(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     * Note: although its possible for an event to have multiple leaderboards, this endpoint will only return the first one found b/c currently we only do events with one leaderboard. That typically means 1 leaderboard schedule starting/ending at the same time as the event itself. Get a leaderboard by event id
     * @param {string} eventId - The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboard(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLeaderboardResponse>>;
    /**
     *
     * @param {SaveLeaderboardArgs} saveLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboard(saveLeaderboardArgs: SaveLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLeaderboardResponse>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboard(id: string, body: PartialCreateLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLeaderboardResponse>>;
};
/**
 * AdminLeaderboardApi - factory interface
 * @export
 */
export declare const AdminLeaderboardApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateLeaderboardArgs} createLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboard(createLeaderboardArgs: CreateLeaderboardArgs, options?: RawAxiosRequestConfig): AxiosPromise<CreateLeaderboardResponse>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboard(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     * Note: although its possible for an event to have multiple leaderboards, this endpoint will only return the first one found b/c currently we only do events with one leaderboard. That typically means 1 leaderboard schedule starting/ending at the same time as the event itself. Get a leaderboard by event id
     * @param {string} eventId - The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboard(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetLeaderboardResponse>;
    /**
     *
     * @param {SaveLeaderboardArgs} saveLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboard(saveLeaderboardArgs: SaveLeaderboardArgs, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLeaderboardResponse>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboard(id: string, body: PartialCreateLeaderboardArgs, options?: RawAxiosRequestConfig): AxiosPromise<UpdateLeaderboardResponse>;
};
/**
 * AdminLeaderboardApi - object-oriented interface
 * @export
 * @class AdminLeaderboardApi
 * @extends {BaseAPI}
 */
export declare class AdminLeaderboardApi extends BaseAPI {
    /**
     *
     * @param {CreateLeaderboardArgs} createLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardApi
     */
    createLeaderboard(createLeaderboardArgs: CreateLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateLeaderboardResponse, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardApi
     */
    deleteLeaderboard(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     * Note: although its possible for an event to have multiple leaderboards, this endpoint will only return the first one found b/c currently we only do events with one leaderboard. That typically means 1 leaderboard schedule starting/ending at the same time as the event itself. Get a leaderboard by event id
     * @param {string} eventId - The event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardApi
     */
    getLeaderboard(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetLeaderboardResponse, any>>;
    /**
     *
     * @param {SaveLeaderboardArgs} saveLeaderboardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardApi
     */
    saveLeaderboard(saveLeaderboardArgs: SaveLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateLeaderboardResponse, any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardApi
     */
    updateLeaderboard(id: string, body: PartialCreateLeaderboardArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateLeaderboardResponse, any>>;
}
/**
 * AdminLeaderboardFactorApi - axios parameter creator
 * @export
 */
export declare const AdminLeaderboardFactorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardFactor: (body: PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardFactor: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardFactor: (leaderboardId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardFactor: (body: PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardFactorArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardFactor: (id: string, body: PartialCreateLeaderboardFactorArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminLeaderboardFactorApi - functional programming interface
 * @export
 */
export declare const AdminLeaderboardFactorApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardFactor(body: PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaderboardFactor>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardFactor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardFactor(leaderboardId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>>;
    /**
     *
     * @param {PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardFactor(body: PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardFactorArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardFactor(id: string, body: PartialCreateLeaderboardFactorArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>>;
};
/**
 * AdminLeaderboardFactorApi - factory interface
 * @export
 */
export declare const AdminLeaderboardFactorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardFactor(body: PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): AxiosPromise<LeaderboardFactor>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardFactor(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardFactor(leaderboardId: string, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>;
    /**
     *
     * @param {PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardFactor(body: PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardFactorArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardFactor(id: string, body: PartialCreateLeaderboardFactorArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType>;
};
/**
 * AdminLeaderboardFactorApi - object-oriented interface
 * @export
 * @class AdminLeaderboardFactorApi
 * @extends {BaseAPI}
 */
export declare class AdminLeaderboardFactorApi extends BaseAPI {
    /**
     *
     * @param {PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardFactorApi
     */
    createLeaderboardFactor(body: PickPrismaLeaderboardFactorUncheckedCreateInputObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LeaderboardFactor, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardFactorApi
     */
    deleteLeaderboardFactor(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardFactorApi
     */
    getLeaderboardFactor(leaderboardId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType, any>>;
    /**
     *
     * @param {PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardFactorApi
     */
    saveLeaderboardFactor(body: PartialPickPrismaLeaderboardFactorUncheckedCreateInputIdOrObjectIdOrTypeOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType, any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardFactorArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardFactorApi
     */
    updateLeaderboardFactor(id: string, body: PartialCreateLeaderboardFactorArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardFactorIdOrCreatedAtOrUpdatedAtOrObjectIdOrType, any>>;
}
/**
 * AdminLeaderboardRewardApi - axios parameter creator
 * @export
 */
export declare const AdminLeaderboardRewardApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} createLeaderboardRewardsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardRewards: (createLeaderboardRewardsArgs: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardReward: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewards: (leaderboardScheduleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewardsSummary: (leaderboardScheduleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardRewards: (body: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardRewards: (id: string, body: PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminLeaderboardRewardApi - functional programming interface
 * @export
 */
export declare const AdminLeaderboardRewardApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} createLeaderboardRewardsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardRewards(createLeaderboardRewardsArgs: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchPayload>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardReward(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewards(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>>>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewardsSummary(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLeaderboardRewardSummaryResponse>>>;
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardRewards(body: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>>>;
    /**
     *
     * @param {string} id
     * @param {PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardRewards(id: string, body: PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>>;
};
/**
 * AdminLeaderboardRewardApi - factory interface
 * @export
 */
export declare const AdminLeaderboardRewardApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} createLeaderboardRewardsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardRewards(createLeaderboardRewardsArgs: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): AxiosPromise<BatchPayload>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardReward(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewards(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardRewardsSummary(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetLeaderboardRewardSummaryResponse>>;
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveLeaderboardRewards(body: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>>;
    /**
     *
     * @param {string} id
     * @param {PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardRewards(id: string, body: PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct>;
};
/**
 * AdminLeaderboardRewardApi - object-oriented interface
 * @export
 * @class AdminLeaderboardRewardApi
 * @extends {BaseAPI}
 */
export declare class AdminLeaderboardRewardApi extends BaseAPI {
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} createLeaderboardRewardsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    createLeaderboardRewards(createLeaderboardRewardsArgs: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BatchPayload, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    deleteLeaderboardReward(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    getLeaderboardRewards(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct[], any>>;
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    getLeaderboardRewardsSummary(leaderboardScheduleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetLeaderboardRewardSummaryResponse[], any>>;
    /**
     *
     * @param {CreateLeaderboardRewardsArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    saveLeaderboardRewards(body: CreateLeaderboardRewardsArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct[], any>>;
    /**
     *
     * @param {string} id
     * @param {PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardRewardApi
     */
    updateLeaderboardRewards(id: string, body: PickPrismaLeaderboardRewardUncheckedCreateInputQuantityOrRewardPlaceOrProductIdOrLeaderboardScheduleId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardRewardIdOrCreatedAtOrUpdatedAtOrQuantityOrRewardPlaceOrProductIdOrProduct, any>>;
}
/**
 * AdminLeaderboardScheduleApi - axios parameter creator
 * @export
 */
export declare const AdminLeaderboardScheduleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardSchedule: (body: PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardSchedule: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardSchedules: (leaderboardId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardSchedule: (id: string, body: PartialCreateLeaderboardScheduleArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminLeaderboardScheduleApi - functional programming interface
 * @export
 */
export declare const AdminLeaderboardScheduleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardSchedule(body: PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardSchedule(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardSchedules(leaderboardId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardSchedule(id: string, body: PartialCreateLeaderboardScheduleArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>>;
};
/**
 * AdminLeaderboardScheduleApi - factory interface
 * @export
 */
export declare const AdminLeaderboardScheduleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLeaderboardSchedule(body: PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLeaderboardSchedule(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardSchedules(leaderboardId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLeaderboardSchedule(id: string, body: PartialCreateLeaderboardScheduleArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed>;
};
/**
 * AdminLeaderboardScheduleApi - object-oriented interface
 * @export
 * @class AdminLeaderboardScheduleApi
 * @extends {BaseAPI}
 */
export declare class AdminLeaderboardScheduleApi extends BaseAPI {
    /**
     *
     * @param {PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardScheduleApi
     */
    createLeaderboardSchedule(body: PickPrismaLeaderboardScheduleUncheckedCreateInputStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessedOrLeaderboardId, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardScheduleApi
     */
    deleteLeaderboardSchedule(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} leaderboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardScheduleApi
     */
    getLeaderboardSchedules(leaderboardId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed[], any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateLeaderboardScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminLeaderboardScheduleApi
     */
    updateLeaderboardSchedule(id: string, body: PartialCreateLeaderboardScheduleArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickLeaderboardScheduleOrIdOrCreatedAtOrUpdatedAtOrStartTimeOrEndTimeOrScheduleProcessedOrRewardsProcessed, any>>;
}
/**
 * AdminProductApi - axios parameter creator
 * @export
 */
export declare const AdminProductApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProductArgs} createProductArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct: (createProductArgs: CreateProductArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<ProductType>} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProducts: (types: Array<ProductType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateProductArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct: (id: string, body: PartialCreateProductArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads an image to S3 and updates the product\'s image URL in the database.
     * @param {string} id product id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProductImages: (id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminProductApi - functional programming interface
 * @export
 */
export declare const AdminProductApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProductArgs} createProductArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(createProductArgs: CreateProductArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {Array<ProductType>} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProducts(types: Array<ProductType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateProductArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(id: string, body: PartialCreateProductArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>>;
    /**
     * Uploads an image to S3 and updates the product\'s image URL in the database.
     * @param {string} id product id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProductImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * AdminProductApi - factory interface
 * @export
 */
export declare const AdminProductApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateProductArgs} createProductArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProduct(createProductArgs: CreateProductArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {Array<ProductType>} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProducts(types: Array<ProductType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateProductArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(id: string, body: PartialCreateProductArgs, options?: RawAxiosRequestConfig): AxiosPromise<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId>;
    /**
     * Uploads an image to S3 and updates the product\'s image URL in the database.
     * @param {string} id product id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadProductImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * AdminProductApi - object-oriented interface
 * @export
 * @class AdminProductApi
 * @extends {BaseAPI}
 */
export declare class AdminProductApi extends BaseAPI {
    /**
     *
     * @param {CreateProductArgs} createProductArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    createProduct(createProductArgs: CreateProductArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    deleteProduct(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {Array<ProductType>} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    getAllProducts(types: Array<ProductType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId[], any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    getProduct(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId, any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateProductArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    updateProduct(id: string, body: PartialCreateProductArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PickProductOrIdOrCreatedAtOrUpdatedAtOrTypeOrTitleOrSubTitleOrDescriptionOrInitialQuantityOrIconUrlOrGameId, any>>;
    /**
     * Uploads an image to S3 and updates the product\'s image URL in the database.
     * @param {string} id product id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminProductApi
     */
    uploadProductImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * AdminQuestApi - axios parameter creator
 * @export
 */
export declare const AdminQuestApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {Array<QuestType>} questTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetQuests: (eventId: string, questTypes: Array<QuestType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} gameId
     * @param {string} eventId
     * @param {CreateQuestGoalArgs} createQuestGoalArgs
     * @param {string} [questId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuest: (gameId: string, eventId: string, createQuestGoalArgs: CreateQuestGoalArgs, questId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the underlying goal and quest.
     * @param {string} questId
     * @param {string} goalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuest: (questId: string, goalId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} questId
     * @param {string} goalId
     * @param {PartialCreateQuestGoalArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuest: (questId: string, goalId: string, body: PartialCreateQuestGoalArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads an image to S3 and updates the goal\'s (Quest) image URL in the database.
     * @param {string} id goal id not quest id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadQuestGoalImages: (id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminQuestApi - functional programming interface
 * @export
 */
export declare const AdminQuestApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {Array<QuestType>} questTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetQuests(eventId: string, questTypes: Array<QuestType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetQuestResponse>>>;
    /**
     *
     * @param {string} gameId
     * @param {string} eventId
     * @param {CreateQuestGoalArgs} createQuestGoalArgs
     * @param {string} [questId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuest(gameId: string, eventId: string, createQuestGoalArgs: CreateQuestGoalArgs, questId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQuestResponse>>;
    /**
     * Deletes the underlying goal and quest.
     * @param {string} questId
     * @param {string} goalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuest(questId: string, goalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} questId
     * @param {string} goalId
     * @param {PartialCreateQuestGoalArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuest(questId: string, goalId: string, body: PartialCreateQuestGoalArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQuestResponse>>;
    /**
     * Uploads an image to S3 and updates the goal\'s (Quest) image URL in the database.
     * @param {string} id goal id not quest id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadQuestGoalImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * AdminQuestApi - factory interface
 * @export
 */
export declare const AdminQuestApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} eventId
     * @param {Array<QuestType>} questTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetQuests(eventId: string, questTypes: Array<QuestType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetQuestResponse>>;
    /**
     *
     * @param {string} gameId
     * @param {string} eventId
     * @param {CreateQuestGoalArgs} createQuestGoalArgs
     * @param {string} [questId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuest(gameId: string, eventId: string, createQuestGoalArgs: CreateQuestGoalArgs, questId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateQuestResponse>;
    /**
     * Deletes the underlying goal and quest.
     * @param {string} questId
     * @param {string} goalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuest(questId: string, goalId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} questId
     * @param {string} goalId
     * @param {PartialCreateQuestGoalArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuest(questId: string, goalId: string, body: PartialCreateQuestGoalArgs, options?: RawAxiosRequestConfig): AxiosPromise<CreateQuestResponse>;
    /**
     * Uploads an image to S3 and updates the goal\'s (Quest) image URL in the database.
     * @param {string} id goal id not quest id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadQuestGoalImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * AdminQuestApi - object-oriented interface
 * @export
 * @class AdminQuestApi
 * @extends {BaseAPI}
 */
export declare class AdminQuestApi extends BaseAPI {
    /**
     *
     * @param {string} eventId
     * @param {Array<QuestType>} questTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestApi
     */
    adminGetQuests(eventId: string, questTypes: Array<QuestType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestResponse[], any>>;
    /**
     *
     * @param {string} gameId
     * @param {string} eventId
     * @param {CreateQuestGoalArgs} createQuestGoalArgs
     * @param {string} [questId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestApi
     */
    createQuest(gameId: string, eventId: string, createQuestGoalArgs: CreateQuestGoalArgs, questId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateQuestResponse, any>>;
    /**
     * Deletes the underlying goal and quest.
     * @param {string} questId
     * @param {string} goalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestApi
     */
    deleteQuest(questId: string, goalId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} questId
     * @param {string} goalId
     * @param {PartialCreateQuestGoalArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestApi
     */
    updateQuest(questId: string, goalId: string, body: PartialCreateQuestGoalArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateQuestResponse, any>>;
    /**
     * Uploads an image to S3 and updates the goal\'s (Quest) image URL in the database.
     * @param {string} id goal id not quest id
     * @param {string} imageType corresponds to the DB column name
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestApi
     */
    uploadQuestGoalImages(id: string, imageType: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * AdminQuestRewardApi - axios parameter creator
 * @export
 */
export declare const AdminQuestRewardApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<CreateQuestRewardArgs>} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyQuestRewards: (createQuestRewardArgs: Array<CreateQuestRewardArgs>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateQuestRewardArgs} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestReward: (createQuestRewardArgs: CreateQuestRewardArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestReward: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PartialCreateQuestRewardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestReward: (body: PartialCreateQuestRewardArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminQuestRewardApi - functional programming interface
 * @export
 */
export declare const AdminQuestRewardApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<CreateQuestRewardArgs>} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyQuestRewards(createQuestRewardArgs: Array<CreateQuestRewardArgs>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchPayload>>;
    /**
     *
     * @param {CreateQuestRewardArgs} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestReward(createQuestRewardArgs: CreateQuestRewardArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuestRewardResponse>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestReward(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {PartialCreateQuestRewardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestReward(body: PartialCreateQuestRewardArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuestRewardResponse>>;
};
/**
 * AdminQuestRewardApi - factory interface
 * @export
 */
export declare const AdminQuestRewardApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Array<CreateQuestRewardArgs>} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyQuestRewards(createQuestRewardArgs: Array<CreateQuestRewardArgs>, options?: RawAxiosRequestConfig): AxiosPromise<BatchPayload>;
    /**
     *
     * @param {CreateQuestRewardArgs} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestReward(createQuestRewardArgs: CreateQuestRewardArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetQuestRewardResponse>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestReward(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {PartialCreateQuestRewardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestReward(body: PartialCreateQuestRewardArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetQuestRewardResponse>;
};
/**
 * AdminQuestRewardApi - object-oriented interface
 * @export
 * @class AdminQuestRewardApi
 * @extends {BaseAPI}
 */
export declare class AdminQuestRewardApi extends BaseAPI {
    /**
     *
     * @param {Array<CreateQuestRewardArgs>} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestRewardApi
     */
    createManyQuestRewards(createQuestRewardArgs: Array<CreateQuestRewardArgs>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BatchPayload, any>>;
    /**
     *
     * @param {CreateQuestRewardArgs} createQuestRewardArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestRewardApi
     */
    createQuestReward(createQuestRewardArgs: CreateQuestRewardArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestRewardResponse, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestRewardApi
     */
    deleteQuestReward(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {PartialCreateQuestRewardArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestRewardApi
     */
    updateQuestReward(body: PartialCreateQuestRewardArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestRewardResponse, any>>;
}
/**
 * AdminQuestScheduleApi - axios parameter creator
 * @export
 */
export declare const AdminQuestScheduleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateQuestScheduleArgs} createQuestScheduleArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestSchedule: (createQuestScheduleArgs: CreateQuestScheduleArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestSchedule: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} questId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestSchedules: (questId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateQuestScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestSchedule: (id: string, body: PartialCreateQuestScheduleArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminQuestScheduleApi - functional programming interface
 * @export
 */
export declare const AdminQuestScheduleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateQuestScheduleArgs} createQuestScheduleArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestSchedule(createQuestScheduleArgs: CreateQuestScheduleArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuestScheduleResponse>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestSchedule(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} questId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestSchedules(questId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetQuestScheduleResponse>>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateQuestScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestSchedule(id: string, body: PartialCreateQuestScheduleArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuestScheduleResponse>>;
};
/**
 * AdminQuestScheduleApi - factory interface
 * @export
 */
export declare const AdminQuestScheduleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateQuestScheduleArgs} createQuestScheduleArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestSchedule(createQuestScheduleArgs: CreateQuestScheduleArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetQuestScheduleResponse>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestSchedule(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} questId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestSchedules(questId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetQuestScheduleResponse>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateQuestScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQuestSchedule(id: string, body: PartialCreateQuestScheduleArgs, options?: RawAxiosRequestConfig): AxiosPromise<GetQuestScheduleResponse>;
};
/**
 * AdminQuestScheduleApi - object-oriented interface
 * @export
 * @class AdminQuestScheduleApi
 * @extends {BaseAPI}
 */
export declare class AdminQuestScheduleApi extends BaseAPI {
    /**
     *
     * @param {CreateQuestScheduleArgs} createQuestScheduleArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestScheduleApi
     */
    createQuestSchedule(createQuestScheduleArgs: CreateQuestScheduleArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestScheduleResponse, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestScheduleApi
     */
    deleteQuestSchedule(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} questId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestScheduleApi
     */
    getQuestSchedules(questId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestScheduleResponse[], any>>;
    /**
     *
     * @param {string} id
     * @param {PartialCreateQuestScheduleArgs} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuestScheduleApi
     */
    updateQuestSchedule(id: string, body: PartialCreateQuestScheduleArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetQuestScheduleResponse, any>>;
}
/**
 * AdminRaffleResultsApi - axios parameter creator
 * @export
 */
export declare const AdminRaffleResultsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the raffle winners by draw schedule id
     * @param {string} drawScheduleId unique id per draw schedule (e.g \&quot;ledge-fortnite-event-draw-schedule\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleWinnersByDrawScheduleId: (drawScheduleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminRaffleResultsApi - functional programming interface
 * @export
 */
export declare const AdminRaffleResultsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the raffle winners by draw schedule id
     * @param {string} drawScheduleId unique id per draw schedule (e.g \&quot;ledge-fortnite-event-draw-schedule\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleWinnersByDrawScheduleId(drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRaffleResultsResponse>>>;
};
/**
 * AdminRaffleResultsApi - factory interface
 * @export
 */
export declare const AdminRaffleResultsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve the raffle winners by draw schedule id
     * @param {string} drawScheduleId unique id per draw schedule (e.g \&quot;ledge-fortnite-event-draw-schedule\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleWinnersByDrawScheduleId(drawScheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetRaffleResultsResponse>>;
};
/**
 * AdminRaffleResultsApi - object-oriented interface
 * @export
 * @class AdminRaffleResultsApi
 * @extends {BaseAPI}
 */
export declare class AdminRaffleResultsApi extends BaseAPI {
    /**
     *
     * @summary Retrieve the raffle winners by draw schedule id
     * @param {string} drawScheduleId unique id per draw schedule (e.g \&quot;ledge-fortnite-event-draw-schedule\&quot;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminRaffleResultsApi
     */
    getRaffleWinnersByDrawScheduleId(drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRaffleResultsResponse[], any>>;
}
/**
 * AdminUserRoleApi - axios parameter creator
 * @export
 */
export declare const AdminUserRoleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new user role for a given user id. User\'s can have multiple roles.
     * @param {string} email
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserRole: (email: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRole: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<UserRoleType>} [roles]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles: (roles?: Array<UserRoleType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a user\'s role type
     * @param {string} id - id of the user role to update
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to update to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRole: (id: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminUserRoleApi - functional programming interface
 * @export
 */
export declare const AdminUserRoleApiFp: (configuration?: Configuration) => {
    /**
     * Create a new user role for a given user id. User\'s can have multiple roles.
     * @param {string} email
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserRole(email: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRole>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRole(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {Array<UserRoleType>} [roles]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(roles?: Array<UserRoleType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserRole>>>;
    /**
     * Update a user\'s role type
     * @param {string} id - id of the user role to update
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to update to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRole(id: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRole>>;
};
/**
 * AdminUserRoleApi - factory interface
 * @export
 */
export declare const AdminUserRoleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new user role for a given user id. User\'s can have multiple roles.
     * @param {string} email
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserRole(email: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): AxiosPromise<GetUserRole>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRole(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {Array<UserRoleType>} [roles]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(roles?: Array<UserRoleType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetUserRole>>;
    /**
     * Update a user\'s role type
     * @param {string} id - id of the user role to update
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to update to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRole(id: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): AxiosPromise<GetUserRole>;
};
/**
 * AdminUserRoleApi - object-oriented interface
 * @export
 * @class AdminUserRoleApi
 * @extends {BaseAPI}
 */
export declare class AdminUserRoleApi extends BaseAPI {
    /**
     * Create a new user role for a given user id. User\'s can have multiple roles.
     * @param {string} email
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserRoleApi
     */
    createUserRole(email: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserRole, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserRoleApi
     */
    deleteUserRole(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {Array<UserRoleType>} [roles]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserRoleApi
     */
    getUserRoles(roles?: Array<UserRoleType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserRole[], any>>;
    /**
     * Update a user\'s role type
     * @param {string} id - id of the user role to update
     * @param {PickPrismaUserRoleNewUncheckedCreateInputRole} body - includes the role type to update to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserRoleApi
     */
    updateUserRole(id: string, body: PickPrismaUserRoleNewUncheckedCreateInputRole, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserRole, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Call on redis service to store access token to enable social client app (e.g discord bot) to use it in subsequent API requests.
     * @param {ConnectionType} applicationType
     * @param {string} socialUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppToken: (applicationType: ConnectionType, socialUserId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Not currently in use. Use case: - Game Studio Devs can call this API from Ledge App to create their own API key and access our external API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Call on redis service to store access token to enable social client app (e.g discord bot) to use it in subsequent API requests.
     * @param {ConnectionType} applicationType
     * @param {string} socialUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppToken(applicationType: ConnectionType, socialUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAppToken200Response>>;
    /**
     * Not currently in use. Use case: - Game Studio Devs can call this API from Ledge App to create their own API key and access our external API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetToken200Response>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Call on redis service to store access token to enable social client app (e.g discord bot) to use it in subsequent API requests.
     * @param {ConnectionType} applicationType
     * @param {string} socialUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppToken(applicationType: ConnectionType, socialUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateAppToken200Response>;
    /**
     * Not currently in use. Use case: - Game Studio Devs can call this API from Ledge App to create their own API key and access our external API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(options?: RawAxiosRequestConfig): AxiosPromise<GetToken200Response>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Call on redis service to store access token to enable social client app (e.g discord bot) to use it in subsequent API requests.
     * @param {ConnectionType} applicationType
     * @param {string} socialUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    createAppToken(applicationType: ConnectionType, socialUserId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAppToken200Response, any>>;
    /**
     * Not currently in use. Use case: - Game Studio Devs can call this API from Ledge App to create their own API key and access our external API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getToken(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetToken200Response, any>>;
}
/**
 * BannersApi - axios parameter creator
 * @export
 */
export declare const BannersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {BannerLocation} bannerLocation
     * @param {string} [eventId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBanners: (bannerLocation: BannerLocation, eventId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BannersApi - functional programming interface
 * @export
 */
export declare const BannersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {BannerLocation} bannerLocation
     * @param {string} [eventId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBanners(bannerLocation: BannerLocation, eventId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Banner>>>;
};
/**
 * BannersApi - factory interface
 * @export
 */
export declare const BannersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {BannerLocation} bannerLocation
     * @param {string} [eventId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBanners(bannerLocation: BannerLocation, eventId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Banner>>;
};
/**
 * BannersApi - object-oriented interface
 * @export
 * @class BannersApi
 * @extends {BaseAPI}
 */
export declare class BannersApi extends BaseAPI {
    /**
     *
     * @param {BannerLocation} bannerLocation
     * @param {string} [eventId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannersApi
     */
    getBanners(bannerLocation: BannerLocation, eventId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Banner[], any>>;
}
/**
 * DrawApi - axios parameter creator
 * @export
 */
export declare const DrawApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimReward: (gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNextActiveDrawSchedule: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPreviousDrawSchedules: (objectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Since a raffle result (UserDraw) claimable period expires in n days after an event ends, before fetching the raffle result, we need to check and update the UserDraw status accordingly.
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleResult: (gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentProcessedDrawSchedule: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DrawApi - functional programming interface
 * @export
 */
export declare const DrawApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimReward(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDraw>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNextActiveDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrawScheduleDetailed>>;
    /**
     *
     * @param {string} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPreviousDrawSchedules(objectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessedDrawSchedule>>>;
    /**
     * Since a raffle result (UserDraw) claimable period expires in n days after an event ends, before fetching the raffle result, we need to check and update the UserDraw status accordingly.
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleResult(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDraw>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentProcessedDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessedDrawSchedule>>;
};
/**
 * DrawApi - factory interface
 * @export
 */
export declare const DrawApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimReward(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDraw>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNextActiveDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<DrawScheduleDetailed>;
    /**
     *
     * @param {string} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPreviousDrawSchedules(objectId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProcessedDrawSchedule>>;
    /**
     * Since a raffle result (UserDraw) claimable period expires in n days after an event ends, before fetching the raffle result, we need to check and update the UserDraw status accordingly.
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRaffleResult(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDraw>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentProcessedDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessedDrawSchedule>;
};
/**
 * DrawApi - object-oriented interface
 * @export
 * @class DrawApi
 * @extends {BaseAPI}
 */
export declare class DrawApi extends BaseAPI {
    /**
     *
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawApi
     */
    claimReward(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserDraw, any>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawApi
     */
    getNextActiveDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DrawScheduleDetailed, any>>;
    /**
     *
     * @param {string} objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawApi
     */
    getPreviousDrawSchedules(objectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessedDrawSchedule[], any>>;
    /**
     * Since a raffle result (UserDraw) claimable period expires in n days after an event ends, before fetching the raffle result, we need to check and update the UserDraw status accordingly.
     * @param {string} gameId
     * @param {string} drawScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawApi
     */
    getRaffleResult(gameId: string, drawScheduleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserDraw, any>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawApi
     */
    getRecentProcessedDrawSchedule(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessedDrawSchedule, any>>;
}
/**
 * EventsApi - axios parameter creator
 * @export
 */
export declare const EventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a specified number of leaderboard win codes for the given game. Requires `write:game-code` permission.
     * @param {GenerateLeaderboardWinCodesRequest} generateLeaderboardWinCodesRequest numOfCodes: the number of codes to generate, eventId: the id of the event to generate codes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLeaderboardWinCodes: (generateLeaderboardWinCodesRequest: GenerateLeaderboardWinCodesRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all events sorted and filtered by status and end time. See repository for more details. Also map event details to include lobby details.
     * @param {Array<EventStatus>} includeStatuses
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEvents: (includeStatuses: Array<EventStatus>, page?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEvent: (gameId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the joined status and timestamp of a user for a specific event.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserJoinedStatus: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Join an event with the specified eventId, userId, and timestamp.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinEvent: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export declare const EventsApiFp: (configuration?: Configuration) => {
    /**
     * Generates a specified number of leaderboard win codes for the given game. Requires `write:game-code` permission.
     * @param {GenerateLeaderboardWinCodesRequest} generateLeaderboardWinCodesRequest numOfCodes: the number of codes to generate, eventId: the id of the event to generate codes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLeaderboardWinCodes(generateLeaderboardWinCodesRequest: GenerateLeaderboardWinCodesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     * Get all events sorted and filtered by status and end time. See repository for more details. Also map event details to include lobby details.
     * @param {Array<EventStatus>} includeStatuses
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEvents(includeStatuses: Array<EventStatus>, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGetEventWithLobbyDetailsResponse>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEvent(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>>;
    /**
     * Get the joined status and timestamp of a user for a specific event.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserJoinedStatus(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserJoinedStatus200Response>>;
    /**
     * Join an event with the specified eventId, userId, and timestamp.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
};
/**
 * EventsApi - factory interface
 * @export
 */
export declare const EventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a specified number of leaderboard win codes for the given game. Requires `write:game-code` permission.
     * @param {GenerateLeaderboardWinCodesRequest} generateLeaderboardWinCodesRequest numOfCodes: the number of codes to generate, eventId: the id of the event to generate codes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLeaderboardWinCodes(generateLeaderboardWinCodesRequest: GenerateLeaderboardWinCodesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     * Get all events sorted and filtered by status and end time. See repository for more details. Also map event details to include lobby details.
     * @param {Array<EventStatus>} includeStatuses
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEvents(includeStatuses: Array<EventStatus>, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGetEventWithLobbyDetailsResponse>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<Event>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEvent(gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<Event>;
    /**
     * Get the joined status and timestamp of a user for a specific event.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserJoinedStatus(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetUserJoinedStatus200Response>;
    /**
     * Join an event with the specified eventId, userId, and timestamp.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinEvent(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
};
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export declare class EventsApi extends BaseAPI {
    /**
     * Generates a specified number of leaderboard win codes for the given game. Requires `write:game-code` permission.
     * @param {GenerateLeaderboardWinCodesRequest} generateLeaderboardWinCodesRequest numOfCodes: the number of codes to generate, eventId: the id of the event to generate codes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    generateLeaderboardWinCodes(generateLeaderboardWinCodesRequest: GenerateLeaderboardWinCodesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     * Get all events sorted and filtered by status and end time. See repository for more details. Also map event details to include lobby details.
     * @param {Array<EventStatus>} includeStatuses
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getAllEvents(includeStatuses: Array<EventStatus>, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedGetEventWithLobbyDetailsResponse, any>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Event, any>>;
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getLatestEvent(gameId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Event, any>>;
    /**
     * Get the joined status and timestamp of a user for a specific event.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    getUserJoinedStatus(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserJoinedStatus200Response, any>>;
    /**
     * Join an event with the specified eventId, userId, and timestamp.
     * @param {string} eventId The ID of the event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    joinEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
}
/**
 * EventsNewApi - axios parameter creator
 * @export
 */
export declare const EventsNewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<EventStatus>} [statuses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserEvents: (statuses?: Array<EventStatus>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requires `creator` role.
     * @param {SaveEventDetailsArgs} saveEventDetailsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEvent: (saveEventDetailsArgs: SaveEventDetailsArgs, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads an image to S3 and updates the event\'s thumbnail URL in the database.
     * @param {string} eventId event id
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadThumbnail: (eventId: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventsNewApi - functional programming interface
 * @export
 */
export declare const EventsNewApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<EventStatus>} [statuses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserEvents(statuses?: Array<EventStatus>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventNew>>>;
    /**
     * Requires `creator` role.
     * @param {SaveEventDetailsArgs} saveEventDetailsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEvent(saveEventDetailsArgs: SaveEventDetailsArgs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventNew>>;
    /**
     * Uploads an image to S3 and updates the event\'s thumbnail URL in the database.
     * @param {string} eventId event id
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadThumbnail(eventId: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * EventsNewApi - factory interface
 * @export
 */
export declare const EventsNewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Array<EventStatus>} [statuses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserEvents(statuses?: Array<EventStatus>, options?: RawAxiosRequestConfig): AxiosPromise<Array<EventNew>>;
    /**
     * Requires `creator` role.
     * @param {SaveEventDetailsArgs} saveEventDetailsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEvent(saveEventDetailsArgs: SaveEventDetailsArgs, options?: RawAxiosRequestConfig): AxiosPromise<EventNew>;
    /**
     * Uploads an image to S3 and updates the event\'s thumbnail URL in the database.
     * @param {string} eventId event id
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadThumbnail(eventId: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * EventsNewApi - object-oriented interface
 * @export
 * @class EventsNewApi
 * @extends {BaseAPI}
 */
export declare class EventsNewApi extends BaseAPI {
    /**
     *
     * @param {Array<EventStatus>} [statuses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsNewApi
     */
    listUserEvents(statuses?: Array<EventStatus>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventNew[], any>>;
    /**
     * Requires `creator` role.
     * @param {SaveEventDetailsArgs} saveEventDetailsArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsNewApi
     */
    saveEvent(saveEventDetailsArgs: SaveEventDetailsArgs, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventNew, any>>;
    /**
     * Uploads an image to S3 and updates the event\'s thumbnail URL in the database.
     * @param {string} eventId event id
     * @param {File} file image to upload to S3
     * @param {string} [replaceUrl] optional url to replace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsNewApi
     */
    uploadThumbnail(eventId: string, file: File, replaceUrl?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * GameCodeApi - axios parameter creator
 * @export
 */
export declare const GameCodeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {ProcessGameCodeRequest} processGameCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGameCode: (processGameCodeRequest: ProcessGameCodeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} linkingCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateLinkingCode: (linkingCode: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GameCodeApi - functional programming interface
 * @export
 */
export declare const GameCodeApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {ProcessGameCodeRequest} processGameCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGameCode(processGameCodeRequest: ProcessGameCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnnouncement200Response>>;
    /**
     *
     * @param {string} linkingCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateLinkingCode(linkingCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateLinkingCode200Response>>;
};
/**
 * GameCodeApi - factory interface
 * @export
 */
export declare const GameCodeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {ProcessGameCodeRequest} processGameCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGameCode(processGameCodeRequest: ProcessGameCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnnouncement200Response>;
    /**
     *
     * @param {string} linkingCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateLinkingCode(linkingCode: string, options?: RawAxiosRequestConfig): AxiosPromise<ValidateLinkingCode200Response>;
};
/**
 * GameCodeApi - object-oriented interface
 * @export
 * @class GameCodeApi
 * @extends {BaseAPI}
 */
export declare class GameCodeApi extends BaseAPI {
    /**
     *
     * @param {ProcessGameCodeRequest} processGameCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameCodeApi
     */
    processGameCode(processGameCodeRequest: ProcessGameCodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteAnnouncement200Response, any>>;
    /**
     *
     * @param {string} linkingCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameCodeApi
     */
    validateLinkingCode(linkingCode: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ValidateLinkingCode200Response, any>>;
}
/**
 * GamesApi - axios parameter creator
 * @export
 */
export declare const GamesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns games in which Ledge users can create events for.
     * @param {number} [page] - The current page index (default is 0).
     * @param {number} [limit] - The number of items per page (default is 10).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventGames: (page?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GamesApi - functional programming interface
 * @export
 */
export declare const GamesApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns games in which Ledge users can create events for.
     * @param {number} [page] - The current page index (default is 0).
     * @param {number} [limit] - The number of items per page (default is 10).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventGames(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEventGame>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDetailed>>;
};
/**
 * GamesApi - factory interface
 * @export
 */
export declare const GamesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns games in which Ledge users can create events for.
     * @param {number} [page] - The current page index (default is 0).
     * @param {number} [limit] - The number of items per page (default is 10).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventGames(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedEventGame>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<GameDetailed>;
};
/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export declare class GamesApi extends BaseAPI {
    /**
     * This endpoint returns games in which Ledge users can create events for.
     * @param {number} [page] - The current page index (default is 0).
     * @param {number} [limit] - The number of items per page (default is 10).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getEventGames(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedEventGame, any>>;
    /**
     *
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    getGame(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameDetailed, any>>;
}
/**
 * GuestApi - axios parameter creator
 * @export
 */
export declare const GuestApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveAnnouncement: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GuestApi - functional programming interface
 * @export
 */
export declare const GuestApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveAnnouncement(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>>;
};
/**
 * GuestApi - factory interface
 * @export
 */
export declare const GuestApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveAnnouncement(options?: RawAxiosRequestConfig): AxiosPromise<Announcement>;
};
/**
 * GuestApi - object-oriented interface
 * @export
 * @class GuestApi
 * @extends {BaseAPI}
 */
export declare class GuestApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    getActiveAnnouncement(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Announcement, any>>;
}
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export declare const InventoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} productTypes
     * @param {boolean} [isDefault]
     * @param {boolean} [isSeen]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory: (productTypes: Array<ProductType>, isDefault?: boolean, isSeen?: boolean, userId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This should return current user\'s raffle entires and return total entries for given productId. productId CAN come from Draw table ticketId
     * @param {string} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemCount: (productId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductIdCount: (productId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ProductType} spinType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpinCase: (spinType: ProductType, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} inventoryId
     * @param {UserInventory} userInventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventory: (inventoryId: string, userInventory: UserInventory, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateProfileRequest} updateProfileRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile: (updateProfileRequest: UpdateProfileRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InventoryApi - functional programming interface
 * @export
 */
export declare const InventoryApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} productTypes
     * @param {boolean} [isDefault]
     * @param {boolean} [isSeen]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(productTypes: Array<ProductType>, isDefault?: boolean, isSeen?: boolean, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserInventoryDetailed>>>;
    /**
     * This should return current user\'s raffle entires and return total entries for given productId. productId CAN come from Draw table ticketId
     * @param {string} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemCount(productId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryItemCount>>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductIdCount(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @param {ProductType} spinType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpinCase(spinType: ProductType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSpinDetailed>>>;
    /**
     *
     * @param {string} inventoryId
     * @param {UserInventory} userInventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventory(inventoryId: string, userInventory: UserInventory, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInventory>>;
    /**
     *
     * @param {UpdateProfileRequest} updateProfileRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile(updateProfileRequest: UpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInventory>>;
};
/**
 * InventoryApi - factory interface
 * @export
 */
export declare const InventoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Array<ProductType>} productTypes
     * @param {boolean} [isDefault]
     * @param {boolean} [isSeen]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(productTypes: Array<ProductType>, isDefault?: boolean, isSeen?: boolean, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserInventoryDetailed>>;
    /**
     * This should return current user\'s raffle entires and return total entries for given productId. productId CAN come from Draw table ticketId
     * @param {string} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemCount(productId?: string, options?: RawAxiosRequestConfig): AxiosPromise<InventoryItemCount>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductIdCount(productId: string, options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @param {ProductType} spinType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSpinCase(spinType: ProductType, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSpinDetailed>>;
    /**
     *
     * @param {string} inventoryId
     * @param {UserInventory} userInventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventory(inventoryId: string, userInventory: UserInventory, options?: RawAxiosRequestConfig): AxiosPromise<UserInventory>;
    /**
     *
     * @param {UpdateProfileRequest} updateProfileRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile(updateProfileRequest: UpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInventory>;
};
/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export declare class InventoryApi extends BaseAPI {
    /**
     *
     * @param {Array<ProductType>} productTypes
     * @param {boolean} [isDefault]
     * @param {boolean} [isSeen]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    getInventory(productTypes: Array<ProductType>, isDefault?: boolean, isSeen?: boolean, userId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserInventoryDetailed[], any>>;
    /**
     * This should return current user\'s raffle entires and return total entries for given productId. productId CAN come from Draw table ticketId
     * @param {string} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    getItemCount(productId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InventoryItemCount, any>>;
    /**
     *
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    getProductIdCount(productId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any>>;
    /**
     *
     * @param {ProductType} spinType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    getSpinCase(spinType: ProductType, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSpinDetailed[], any>>;
    /**
     *
     * @param {string} inventoryId
     * @param {UserInventory} userInventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    updateInventory(inventoryId: string, userInventory: UserInventory, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserInventory, any>>;
    /**
     *
     * @param {UpdateProfileRequest} updateProfileRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    updateProfile(updateProfileRequest: UpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserInventory, any>>;
}
/**
 * LeaderboardApi - axios parameter creator
 * @export
 */
export declare const LeaderboardApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardScore: (leaderboardScheduleId: string, gameId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMostRecentLeaderboardSchedules: (eventId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LeaderboardApi - functional programming interface
 * @export
 */
export declare const LeaderboardApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardScore(leaderboardScheduleId: string, gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaderboardScore>>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMostRecentLeaderboardSchedules(eventId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeaderboardScheduleDetailed>>>;
};
/**
 * LeaderboardApi - factory interface
 * @export
 */
export declare const LeaderboardApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardScore(leaderboardScheduleId: string, gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<LeaderboardScore>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMostRecentLeaderboardSchedules(eventId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<LeaderboardScheduleDetailed>>;
};
/**
 * LeaderboardApi - object-oriented interface
 * @export
 * @class LeaderboardApi
 * @extends {BaseAPI}
 */
export declare class LeaderboardApi extends BaseAPI {
    /**
     *
     * @param {string} leaderboardScheduleId
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardApi
     */
    getLeaderboardScore(leaderboardScheduleId: string, gameId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LeaderboardScore, any>>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardApi
     */
    getMostRecentLeaderboardSchedules(eventId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LeaderboardScheduleDetailed[], any>>;
}
/**
 * LeaderboardResultApi - axios parameter creator
 * @export
 */
export declare const LeaderboardResultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get leaderboard results for a given event
     * @param {string} eventId The ID of the event to get leaderboard results for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardResults: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LeaderboardResultApi - functional programming interface
 * @export
 */
export declare const LeaderboardResultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get leaderboard results for a given event
     * @param {string} eventId The ID of the event to get leaderboard results for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardResults(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>>;
};
/**
 * LeaderboardResultApi - factory interface
 * @export
 */
export declare const LeaderboardResultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get leaderboard results for a given event
     * @param {string} eventId The ID of the event to get leaderboard results for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLeaderboardResults(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>>;
};
/**
 * LeaderboardResultApi - object-oriented interface
 * @export
 * @class LeaderboardResultApi
 * @extends {BaseAPI}
 */
export declare class LeaderboardResultApi extends BaseAPI {
    /**
     *
     * @summary Get leaderboard results for a given event
     * @param {string} eventId The ID of the event to get leaderboard results for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardResultApi
     */
    getLeaderboardResults(eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any[], any>>;
}
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export declare const NotificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    claimPrize: (claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimPrizeNew: (claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreatePrizeDeliveredNotificationRequest} createPrizeDeliveredNotificationRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createPrizeDeliveredNotification: (createPrizeDeliveredNotificationRequest: CreatePrizeDeliveredNotificationRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetNotificationsOrderByCreatedEnum} [orderByCreated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications: (page?: number, limit?: number, orderByCreated?: GetNotificationsOrderByCreatedEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateNotificationsRequest} updateNotificationsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotifications: (updateNotificationsRequest: UpdateNotificationsRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
export declare const NotificationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    claimPrize(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePrizeDeliveredNotification200Response>>;
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimPrizeNew(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimPrizeResponse>>;
    /**
     *
     * @param {CreatePrizeDeliveredNotificationRequest} createPrizeDeliveredNotificationRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createPrizeDeliveredNotification(createPrizeDeliveredNotificationRequest: CreatePrizeDeliveredNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePrizeDeliveredNotification200Response>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetNotificationsOrderByCreatedEnum} [orderByCreated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(page?: number, limit?: number, orderByCreated?: GetNotificationsOrderByCreatedEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationDetailed>>;
    /**
     *
     * @param {UpdateNotificationsRequest} updateNotificationsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotifications(updateNotificationsRequest: UpdateNotificationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * NotificationApi - factory interface
 * @export
 */
export declare const NotificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    claimPrize(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatePrizeDeliveredNotification200Response>;
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    claimPrizeNew(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClaimPrizeResponse>;
    /**
     *
     * @param {CreatePrizeDeliveredNotificationRequest} createPrizeDeliveredNotificationRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createPrizeDeliveredNotification(createPrizeDeliveredNotificationRequest: CreatePrizeDeliveredNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatePrizeDeliveredNotification200Response>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetNotificationsOrderByCreatedEnum} [orderByCreated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotifications(page?: number, limit?: number, orderByCreated?: GetNotificationsOrderByCreatedEnum, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedNotificationDetailed>;
    /**
     *
     * @param {UpdateNotificationsRequest} updateNotificationsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotifications(updateNotificationsRequest: UpdateNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export declare class NotificationApi extends BaseAPI {
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    claimPrize(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePrizeDeliveredNotification200Response, any>>;
    /**
     *
     * @param {ClaimPrizeRequest} claimPrizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    claimPrizeNew(claimPrizeRequest: ClaimPrizeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ClaimPrizeResponse, any>>;
    /**
     *
     * @param {CreatePrizeDeliveredNotificationRequest} createPrizeDeliveredNotificationRequest
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    createPrizeDeliveredNotification(createPrizeDeliveredNotificationRequest: CreatePrizeDeliveredNotificationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePrizeDeliveredNotification200Response, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    deleteById(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetNotificationsOrderByCreatedEnum} [orderByCreated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getNotifications(page?: number, limit?: number, orderByCreated?: GetNotificationsOrderByCreatedEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedNotificationDetailed, any>>;
    /**
     *
     * @param {UpdateNotificationsRequest} updateNotificationsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    updateNotifications(updateNotificationsRequest: UpdateNotificationsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * @export
 */
export declare const GetNotificationsOrderByCreatedEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type GetNotificationsOrderByCreatedEnum = typeof GetNotificationsOrderByCreatedEnum[keyof typeof GetNotificationsOrderByCreatedEnum];
/**
 * ProductApi - axios parameter creator
 * @export
 */
export declare const ProductApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} [productTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts: (productTypes?: Array<ProductType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProductApi - functional programming interface
 * @export
 */
export declare const ProductApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} [productTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(productTypes?: Array<ProductType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>>;
};
/**
 * ProductApi - factory interface
 * @export
 */
export declare const ProductApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Array<ProductType>} [productTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(productTypes?: Array<ProductType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Product>>;
};
/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export declare class ProductApi extends BaseAPI {
    /**
     *
     * @param {Array<ProductType>} [productTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    getProducts(productTypes?: Array<ProductType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Product[], any>>;
}
/**
 * QuestsApi - axios parameter creator
 * @export
 */
export declare const QuestsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {QuestType} questType
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {boolean} [processed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuests: (eventId: string, questType: QuestType, page?: number, limit?: number, activityTypes?: Array<ActivityType>, processed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuestsApi - functional programming interface
 * @export
 */
export declare const QuestsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} eventId
     * @param {QuestType} questType
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {boolean} [processed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuests(eventId: string, questType: QuestType, page?: number, limit?: number, activityTypes?: Array<ActivityType>, processed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQuestGoal>>;
};
/**
 * QuestsApi - factory interface
 * @export
 */
export declare const QuestsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} eventId
     * @param {QuestType} questType
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {boolean} [processed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuests(eventId: string, questType: QuestType, page?: number, limit?: number, activityTypes?: Array<ActivityType>, processed?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedQuestGoal>;
};
/**
 * QuestsApi - object-oriented interface
 * @export
 * @class QuestsApi
 * @extends {BaseAPI}
 */
export declare class QuestsApi extends BaseAPI {
    /**
     *
     * @param {string} eventId
     * @param {QuestType} questType
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {boolean} [processed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestsApi
     */
    getQuests(eventId: string, questType: QuestType, page?: number, limit?: number, activityTypes?: Array<ActivityType>, processed?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedQuestGoal, any>>;
}
/**
 * QuestsNewApi - axios parameter creator
 * @export
 */
export declare const QuestsNewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameQuestTemplates: (gameId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<QuestType>} [questTypes]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestsNew: (eventId: string, page?: number, limit?: number, questTypes?: Array<QuestType>, activityTypes?: Array<ActivityType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<ActivityType>} activityTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSocialQuestTemplates: (activityTypes: Array<ActivityType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuestsNewApi - functional programming interface
 * @export
 */
export declare const QuestsNewApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameQuestTemplates(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GameQuestTemplate>>>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<QuestType>} [questTypes]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestsNew(eventId: string, page?: number, limit?: number, questTypes?: Array<QuestType>, activityTypes?: Array<ActivityType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAny>>;
    /**
     *
     * @param {Array<ActivityType>} activityTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSocialQuestTemplates(activityTypes: Array<ActivityType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GameQuestTemplate>>>;
};
/**
 * QuestsNewApi - factory interface
 * @export
 */
export declare const QuestsNewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameQuestTemplates(gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GameQuestTemplate>>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<QuestType>} [questTypes]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestsNew(eventId: string, page?: number, limit?: number, questTypes?: Array<QuestType>, activityTypes?: Array<ActivityType>, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAny>;
    /**
     *
     * @param {Array<ActivityType>} activityTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSocialQuestTemplates(activityTypes: Array<ActivityType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GameQuestTemplate>>;
};
/**
 * QuestsNewApi - object-oriented interface
 * @export
 * @class QuestsNewApi
 * @extends {BaseAPI}
 */
export declare class QuestsNewApi extends BaseAPI {
    /**
     *
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestsNewApi
     */
    getGameQuestTemplates(gameId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameQuestTemplate[], any>>;
    /**
     *
     * @param {string} eventId
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Array<QuestType>} [questTypes]
     * @param {Array<ActivityType>} [activityTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestsNewApi
     */
    getQuestsNew(eventId: string, page?: number, limit?: number, questTypes?: Array<QuestType>, activityTypes?: Array<ActivityType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedAny, any>>;
    /**
     *
     * @param {Array<ActivityType>} activityTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestsNewApi
     */
    getSocialQuestTemplates(activityTypes: Array<ActivityType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameQuestTemplate[], any>>;
}
/**
 * SocialApi - axios parameter creator
 * @export
 */
export declare const SocialApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * If there is no goalId, still save the user connection details. If there is a goalId, complete the quest/goal and reward the user. If the quest is completed, update the leaderboard score.
     * @param {CompleteSocialQuestRequest} completeSocialQuestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuest: (completeSocialQuestRequest: CompleteSocialQuestRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SocialQuestCreateInput} socialQuestCreateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSociaQuest: (socialQuestCreateInput: SocialQuestCreateInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SocialApi - functional programming interface
 * @export
 */
export declare const SocialApiFp: (configuration?: Configuration) => {
    /**
     * If there is no goalId, still save the user connection details. If there is a goalId, complete the quest/goal and reward the user. If the quest is completed, update the leaderboard score.
     * @param {CompleteSocialQuestRequest} completeSocialQuestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuest(completeSocialQuestRequest: CompleteSocialQuestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteSocialQuestResponse>>;
    /**
     *
     * @param {SocialQuestCreateInput} socialQuestCreateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSociaQuest(socialQuestCreateInput: SocialQuestCreateInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Goal>>;
};
/**
 * SocialApi - factory interface
 * @export
 */
export declare const SocialApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * If there is no goalId, still save the user connection details. If there is a goalId, complete the quest/goal and reward the user. If the quest is completed, update the leaderboard score.
     * @param {CompleteSocialQuestRequest} completeSocialQuestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuest(completeSocialQuestRequest: CompleteSocialQuestRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompleteSocialQuestResponse>;
    /**
     *
     * @param {SocialQuestCreateInput} socialQuestCreateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSociaQuest(socialQuestCreateInput: SocialQuestCreateInput, options?: RawAxiosRequestConfig): AxiosPromise<Goal>;
};
/**
 * SocialApi - object-oriented interface
 * @export
 * @class SocialApi
 * @extends {BaseAPI}
 */
export declare class SocialApi extends BaseAPI {
    /**
     * If there is no goalId, still save the user connection details. If there is a goalId, complete the quest/goal and reward the user. If the quest is completed, update the leaderboard score.
     * @param {CompleteSocialQuestRequest} completeSocialQuestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    completeSocialQuest(completeSocialQuestRequest: CompleteSocialQuestRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CompleteSocialQuestResponse, any>>;
    /**
     *
     * @param {SocialQuestCreateInput} socialQuestCreateInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    createSociaQuest(socialQuestCreateInput: SocialQuestCreateInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Goal, any>>;
}
/**
 * SocialNewApi - axios parameter creator
 * @export
 */
export declare const SocialNewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CompleteSocialQuestRequestNew} completeSocialQuestRequestNew
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuestNew: (completeSocialQuestRequestNew: CompleteSocialQuestRequestNew, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} [id]
     * @param {Array<ConnectionType>} [connectionTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectedSocialsNew: (id?: string, connectionTypes?: Array<ConnectionType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocialNew: (connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SocialNewApi - functional programming interface
 * @export
 */
export declare const SocialNewApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CompleteSocialQuestRequestNew} completeSocialQuestRequestNew
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuestNew(completeSocialQuestRequestNew: CompleteSocialQuestRequestNew, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressNew>>;
    /**
     *
     * @param {string} [id]
     * @param {Array<ConnectionType>} [connectionTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectedSocialsNew(id?: string, connectionTypes?: Array<ConnectionType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserConnection>>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocialNew(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SocialNewApi - factory interface
 * @export
 */
export declare const SocialNewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CompleteSocialQuestRequestNew} completeSocialQuestRequestNew
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeSocialQuestNew(completeSocialQuestRequestNew: CompleteSocialQuestRequestNew, options?: RawAxiosRequestConfig): AxiosPromise<ProgressNew>;
    /**
     *
     * @param {string} [id]
     * @param {Array<ConnectionType>} [connectionTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectedSocialsNew(id?: string, connectionTypes?: Array<ConnectionType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserConnection>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocialNew(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * SocialNewApi - object-oriented interface
 * @export
 * @class SocialNewApi
 * @extends {BaseAPI}
 */
export declare class SocialNewApi extends BaseAPI {
    /**
     *
     * @param {CompleteSocialQuestRequestNew} completeSocialQuestRequestNew
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialNewApi
     */
    completeSocialQuestNew(completeSocialQuestRequestNew: CompleteSocialQuestRequestNew, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProgressNew, any>>;
    /**
     *
     * @param {string} [id]
     * @param {Array<ConnectionType>} [connectionTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialNewApi
     */
    getConnectedSocialsNew(id?: string, connectionTypes?: Array<ConnectionType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserConnection[], any>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialNewApi
     */
    removeConnectedSocialNew(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TransactionApi - axios parameter creator
 * @export
 */
export declare const TransactionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} [sellProductType]
     * @param {string} [sellProductId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions: (sellProductType?: Array<ProductType>, sellProductId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionApi - functional programming interface
 * @export
 */
export declare const TransactionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array<ProductType>} [sellProductType]
     * @param {string} [sellProductId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions(sellProductType?: Array<ProductType>, sellProductId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTransactionDetailed>>;
};
/**
 * TransactionApi - factory interface
 * @export
 */
export declare const TransactionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Array<ProductType>} [sellProductType]
     * @param {string} [sellProductId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions(sellProductType?: Array<ProductType>, sellProductId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedTransactionDetailed>;
};
/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export declare class TransactionApi extends BaseAPI {
    /**
     *
     * @param {Array<ProductType>} [sellProductType]
     * @param {string} [sellProductId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    getAllTransactions(sellProductType?: Array<ProductType>, sellProductId?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedTransactionDetailed, any>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMe: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedAccounts: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReferrals: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} [id]
     * @param {string} [email]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id?: string, email?: string, code?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} gameId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersMergedWith: (gameId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<GameCodeType>} gameCodeType
     * @param {string} gameId
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWinCodeHistory: (gameCodeType: Array<GameCodeType>, gameId: string, eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {RegisterRequest} registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: (registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateRequest} updateRequest
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: (updateRequest: UpdateRequest, userId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} referralCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReferral: (referralCode: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Only 1 external user for a given game can be linked to an internal user (mergedWith). Meaning you cannot link internalId1 to externalId2 from fake-game if internalId1 is already merged with externalId1 from fake-game.
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMergedWith: (gameId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedAccounts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LinkedAccount>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReferrals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     *
     * @param {string} [id]
     * @param {string} [email]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id?: string, email?: string, code?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {string} gameId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersMergedWith(gameId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     *
     * @param {Array<GameCodeType>} gameCodeType
     * @param {string} gameId
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWinCodeHistory(gameCodeType: Array<GameCodeType>, gameId: string, eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GameCode>>>;
    /**
     *
     * @param {RegisterRequest} registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {UpdateRequest} updateRequest
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(updateRequest: UpdateRequest, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {string} referralCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReferral(referralCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Only 1 external user for a given game can be linked to an internal user (mergedWith). Meaning you cannot link internalId1 to externalId2 from fake-game if internalId1 is already merged with externalId1 from fake-game.
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMergedWith(gameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMe(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedAccounts(options?: RawAxiosRequestConfig): AxiosPromise<Array<LinkedAccount>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReferrals(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;
    /**
     *
     * @param {string} [id]
     * @param {string} [email]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id?: string, email?: string, code?: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {string} gameId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersMergedWith(gameId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;
    /**
     *
     * @param {Array<GameCodeType>} gameCodeType
     * @param {string} gameId
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWinCodeHistory(gameCodeType: Array<GameCodeType>, gameId: string, eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GameCode>>;
    /**
     *
     * @param {RegisterRequest} registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {UpdateRequest} updateRequest
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(updateRequest: UpdateRequest, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {string} referralCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateReferral(referralCode: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Only 1 external user for a given game can be linked to an internal user (mergedWith). Meaning you cannot link internalId1 to externalId2 from fake-game if internalId1 is already merged with externalId1 from fake-game.
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMergedWith(gameId: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteMe(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getLinkedAccounts(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LinkedAccount[], any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMe(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getReferrals(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User[], any>>;
    /**
     *
     * @param {string} [id]
     * @param {string} [email]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(id?: string, email?: string, code?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {string} gameId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUsersMergedWith(gameId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User[], any>>;
    /**
     *
     * @param {Array<GameCodeType>} gameCodeType
     * @param {string} gameId
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getWinCodeHistory(gameCodeType: Array<GameCodeType>, gameId: string, eventId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GameCode[], any>>;
    /**
     *
     * @param {RegisterRequest} registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    register(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {UpdateRequest} updateRequest
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    update(updateRequest: UpdateRequest, userId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {string} referralCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateReferral(referralCode: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Only 1 external user for a given game can be linked to an internal user (mergedWith). Meaning you cannot link internalId1 to externalId2 from fake-game if internalId1 is already merged with externalId1 from fake-game.
     * @param {string} gameId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userMergedWith(gameId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
}
/**
 * UserConnectionApi - axios parameter creator
 * @export
 */
export declare const UserConnectionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateUserConnectionRequest} createUserConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectSocial: (createUserConnectionRequest: CreateUserConnectionRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<ConnectionType>} connectionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserConnections: (connectionTypes: Array<ConnectionType>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocial: (connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserConnectionApi - functional programming interface
 * @export
 */
export declare const UserConnectionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateUserConnectionRequest} createUserConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectSocial(createUserConnectionRequest: CreateUserConnectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserConnectionResponse>>;
    /**
     *
     * @param {Array<ConnectionType>} connectionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserConnections(connectionTypes: Array<ConnectionType>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserConnectionResponse>>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocial(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserConnectionApi - factory interface
 * @export
 */
export declare const UserConnectionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateUserConnectionRequest} createUserConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectSocial(createUserConnectionRequest: CreateUserConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserConnectionResponse>;
    /**
     *
     * @param {Array<ConnectionType>} connectionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserConnections(connectionTypes: Array<ConnectionType>, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetUserConnectionResponse>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeConnectedSocial(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * UserConnectionApi - object-oriented interface
 * @export
 * @class UserConnectionApi
 * @extends {BaseAPI}
 */
export declare class UserConnectionApi extends BaseAPI {
    /**
     *
     * @param {CreateUserConnectionRequest} createUserConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserConnectionApi
     */
    connectSocial(createUserConnectionRequest: CreateUserConnectionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUserConnectionResponse, any>>;
    /**
     *
     * @param {Array<ConnectionType>} connectionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserConnectionApi
     */
    getUserConnections(connectionTypes: Array<ConnectionType>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserConnectionResponse[], any>>;
    /**
     *
     * @param {ConnectionType} connectionType
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserConnectionApi
     */
    removeConnectedSocial(connectionType: ConnectionType, userId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UserWalletApi - axios parameter creator
 * @export
 */
export declare const UserWalletApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWallets: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeSolanaUserWalletToDB: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateUserWalletRequest} updateUserWalletRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWallet: (updateUserWalletRequest: UpdateUserWalletRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserWalletApi - functional programming interface
 * @export
 */
export declare const UserWalletApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWallets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserWallet>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeSolanaUserWalletToDB(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWallet>>;
    /**
     *
     * @param {UpdateUserWalletRequest} updateUserWalletRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWallet(updateUserWalletRequest: UpdateUserWalletRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserWalletApi - factory interface
 * @export
 */
export declare const UserWalletApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserWallets(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserWallet>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeSolanaUserWalletToDB(options?: RawAxiosRequestConfig): AxiosPromise<UserWallet>;
    /**
     *
     * @param {UpdateUserWalletRequest} updateUserWalletRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserWallet(updateUserWalletRequest: UpdateUserWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * UserWalletApi - object-oriented interface
 * @export
 * @class UserWalletApi
 * @extends {BaseAPI}
 */
export declare class UserWalletApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWalletApi
     */
    getUserWallets(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWallet[], any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWalletApi
     */
    storeSolanaUserWalletToDB(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWallet, any>>;
    /**
     *
     * @param {UpdateUserWalletRequest} updateUserWalletRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserWalletApi
     */
    updateUserWallet(updateUserWalletRequest: UpdateUserWalletRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UtilityApi - axios parameter creator
 * @export
 */
export declare const UtilityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Does sanity checks and returns 200 OK if everything is working as expected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheck: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UtilityApi - functional programming interface
 * @export
 */
export declare const UtilityApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Does sanity checks and returns 200 OK if everything is working as expected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * UtilityApi - factory interface
 * @export
 */
export declare const UtilityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Does sanity checks and returns 200 OK if everything is working as expected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<string>;
};
/**
 * UtilityApi - object-oriented interface
 * @export
 * @class UtilityApi
 * @extends {BaseAPI}
 */
export declare class UtilityApi extends BaseAPI {
    /**
     *
     * @summary Does sanity checks and returns 200 OK if everything is working as expected.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApi
     */
    healthCheck(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
